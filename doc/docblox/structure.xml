<?xml version="1.0"?>
<project version="0.14.0" title="">
  <file path="NoiseLabs/ToolKit/GoogleAPI/Maps/Map.php" hash="fa2070807867d0c06b0f2d0195d04421" package="GoogleAPI">
    <docblock>
      <description>This file is part of NoiseLabs-PHP-ToolKit</description>
      <long-description>&lt;p&gt;NoiseLabs-PHP-ToolKit is free software; you can redistribute it
and/or modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.&lt;/p&gt;

&lt;p&gt;NoiseLabs-PHP-ToolKit is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.&lt;/p&gt;

&lt;p&gt;You should have received a copy of the GNU Lesser General Public
License along with NoiseLabs-PHP-ToolKit; if not, see
&lt;a href="http://www.gnu.org/licenses/"&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Copyright (C) 2011 V&#xED;tor Brand&#xE3;o&lt;/p&gt;
</long-description>
      <tag name="category" description="NoiseLabs"/>
      <tag name="package" description="GoogleAPI"/>
      <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="copyright" description="(C) 2011 V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="license" description="http://www.gnu.org/licenses/lgpl-3.0-standalone.html LGPL-3"/>
      <tag name="link" description="http://www.noiselabs.org" link="http://www.noiselabs.org"/>
      <tag name="since" description="0.1.0"/>
    </docblock>
    <parse_markers>
      <error line="43">No DocBlock was found for Constant GOOGLE_MAPS_JAVASCRIPT_API</error>
      <error line="93">No DocBlock was found for Method render</error>
    </parse_markers>
    <namespace-alias name="BaseMap">NoiseLabs\ToolKit\GoogleAPI\Maps\BaseMap</namespace-alias>
    <class final="false" abstract="false" line="41" namespace="NoiseLabs\ToolKit\GoogleAPI\Maps" package="Default">
      <name>Map</name>
      <extends>\NoiseLabs\ToolKit\GoogleAPI\Maps\BaseMap</extends>
      <full_name>\NoiseLabs\ToolKit\GoogleAPI\Maps\Map</full_name>
      <docblock>
        <description>A class that makes use of the Google Maps API to create customizable maps
that can be embedded on your website.</description>
        <long-description>&lt;p&gt;The API version in use is Google Maps Javascript API Version 3.&lt;/p&gt;
</long-description>
        <tag name="link" description="http://code.google.com/intl/pt-PT/apis/maps/documentation/javascript/basics.html" link="http://code.google.com/intl/pt-PT/apis/maps/documentation/javascript/basics.html" line="34"/>
      </docblock>
      <constant namespace="NoiseLabs\ToolKit\GoogleAPI\Maps" line="43" package="Default">
        <name>GOOGLE_MAPS_JAVASCRIPT_API</name>
        <value>v3</value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" line="48" package="Default">
        <name>printGoogleJS</name>
        <docblock>
          <description>For backwards compatibility.</description>
          <long-description>
</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="58" package="Default">
        <name>loadJavascriptApi</name>
        <docblock>
          <description>Include the Maps API JavaScript using a script tag.</description>
          <long-description>&lt;p&gt;This function should be called in between the html &lt;head&gt;&lt;/head&gt; tags.&lt;/p&gt;
</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="93" package="Default">
        <name>render</name>
      </method>
    </class>
  </file>
  <file path="NoiseLabs/ToolKit/GoogleAPI/Maps/Geolocation.php" hash="f072504aa44ac5bcb809a7b96639e97d" package="GoogleAPI">
    <docblock>
      <description>This file is part of NoiseLabs-PHP-ToolKit</description>
      <long-description>&lt;p&gt;NoiseLabs-PHP-ToolKit is free software; you can redistribute it
and/or modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.&lt;/p&gt;

&lt;p&gt;NoiseLabs-PHP-ToolKit is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.&lt;/p&gt;

&lt;p&gt;You should have received a copy of the GNU Lesser General Public
License along with NoiseLabs-PHP-ToolKit; if not, see
&lt;a href="http://www.gnu.org/licenses/"&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Copyright (C) 2011 V&#xED;tor Brand&#xE3;o&lt;/p&gt;
</long-description>
      <tag name="category" description="NoiseLabs"/>
      <tag name="package" description="GoogleAPI"/>
      <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="copyright" description="(C) 2011 V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="license" description="http://www.gnu.org/licenses/lgpl-3.0-standalone.html LGPL-3"/>
      <tag name="link" description="http://www.noiselabs.org" link="http://www.noiselabs.org"/>
      <tag name="since" description="0.2.0"/>
    </docblock>
    <parse_markers>
      <error line="43">No DocBlock was found for Property $latitude</error>
      <error line="44">No DocBlock was found for Property $longitude</error>
      <error line="45">No DocBlock was found for Property $altitude</error>
      <error line="46">No DocBlock was found for Property $speed</error>
      <error line="47">No DocBlock was found for Property $timestamp</error>
    </parse_markers>
    <namespace-alias name="Helper">NoiseLabs\ToolKit\Helper</namespace-alias>
    <class final="false" abstract="false" line="41" namespace="NoiseLabs\ToolKit\GoogleAPI\Maps" package="Default">
      <name>Geolocation</name>
      <extends/>
      <full_name>\NoiseLabs\ToolKit\GoogleAPI\Maps\Geolocation</full_name>
      <docblock>
        <description>The core class for each Overlay element containing GPS coordinates (latitude
and longitude) to identify a specific position.</description>
        <long-description>
</long-description>
        <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;" line="34"/>
        <tag name="since" description="0.2.0" line="34"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="43" package="Default">
        <name>$latitude</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="public" line="44" package="Default">
        <name>$longitude</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="public" line="45" package="Default">
        <name>$altitude</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="public" line="46" package="Default">
        <name>$speed</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="public" line="47" package="Default">
        <name>$timestamp</name>
        <default/>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="54" package="Default">
        <name>__construct</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="param" description="" type="array" variable="$properties" line="49">
            <type by_reference="false">array</type>
          </tag>
          <tag name="since" description="0.2.0" line="49"/>
        </docblock>
        <argument line="54">
          <name>$properties</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="69" package="Default">
        <name>create</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="param" description="" type="float" variable="$latitude" line="61">
            <type by_reference="false">float</type>
          </tag>
          <tag name="param" description="" type="float" variable="$longitude" line="61">
            <type by_reference="false">float</type>
          </tag>
          <tag name="param" description="" type="float" variable="$altitude" line="61">
            <type by_reference="false">float</type>
          </tag>
          <tag name="param" description="" type="float" variable="$speed" line="61">
            <type by_reference="false">float</type>
          </tag>
          <tag name="param" description="" type="string" variable="$timestamp" line="61">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="69">
          <name>$latitude</name>
          <default/>
          <type/>
        </argument>
        <argument line="69">
          <name>$longitude</name>
          <default/>
          <type/>
        </argument>
        <argument line="69">
          <name>$altitude</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="70">
          <name>$speed</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="70">
          <name>$timestamp</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="NoiseLabs/ToolKit/GoogleAPI/Maps/BaseMap.php" hash="7031bf206a2da2e5c9b687a8040d024e" package="GoogleAPI">
    <docblock>
      <description>This file is part of NoiseLabs-PHP-ToolKit</description>
      <long-description>&lt;p&gt;NoiseLabs-PHP-ToolKit is free software; you can redistribute it
and/or modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.&lt;/p&gt;

&lt;p&gt;NoiseLabs-PHP-ToolKit is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.&lt;/p&gt;

&lt;p&gt;You should have received a copy of the GNU Lesser General Public
License along with NoiseLabs-PHP-ToolKit; if not, see
&lt;a href="http://www.gnu.org/licenses/"&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Copyright (C) 2011 V&#xED;tor Brand&#xE3;o&lt;/p&gt;
</long-description>
      <tag name="category" description="NoiseLabs"/>
      <tag name="package" description="GoogleAPI"/>
      <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="copyright" description="(C) 2011 V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="license" description="http://www.gnu.org/licenses/lgpl-3.0-standalone.html LGPL-3"/>
      <tag name="link" description="http://www.noiselabs.org" link="http://www.noiselabs.org"/>
      <tag name="since" description="0.1.0"/>
    </docblock>
    <parse_markers>
      <error line="91">No DocBlock was found for Property $https</error>
      <notice line="96">Argument $id is missing from the function Docblock</notice>
      <notice line="96">Argument $options is missing from the function Docblock</notice>
      <notice line="96">Argument $parameters is missing from the function Docblock</notice>
      <error line="111">No DocBlock was found for Method getOptionsDefaults</error>
      <error line="159">No DocBlock was found for Method setId</error>
      <error line="164">No DocBlock was found for Method getId</error>
      <notice line="172">Argument $overlay is missing from the function Docblock</notice>
      <error line="205">No DocBlock was found for Method hasMarkers</error>
      <error line="238">No DocBlock was found for Method removeMarker</error>
      <error line="248">No DocBlock was found for Method setMarkers</error>
      <error line="253">No DocBlock was found for Method getMarkers</error>
      <error line="296">No DocBlock was found for Method create</error>
    </parse_markers>
    <namespace-alias name="ParameterBag">NoiseLabs\ToolKit\GoogleAPI\ParameterBag</namespace-alias>
    <namespace-alias name="MapInterface">NoiseLabs\ToolKit\GoogleAPI\Maps\MapInterface</namespace-alias>
    <namespace-alias name="Marker">NoiseLabs\ToolKit\GoogleAPI\Maps\Overlay\Marker</namespace-alias>
    <class final="false" abstract="true" line="45" namespace="NoiseLabs\ToolKit\GoogleAPI\Maps" package="Default">
      <name>BaseMap</name>
      <extends/>
      <full_name>\NoiseLabs\ToolKit\GoogleAPI\Maps\BaseMap</full_name>
      <docblock>
        <description>GoogleMaps base class (abstract).</description>
        <long-description>&lt;p&gt;Inspired by a GoogleMaps implementation made by tirnanog06.&lt;/p&gt;
</long-description>
        <tag name="see" description="\NoiseLabs\ToolKit\GoogleAPI\Maps\https://github.com/kriswallsmith/GoogleBundle" refers="\NoiseLabs\ToolKit\GoogleAPI\Maps\https://github.com/kriswallsmith/GoogleBundle" line="36"/>
      </docblock>
      <implements>\NoiseLabs\ToolKit\GoogleAPI\Maps\MapInterface</implements>
      <property final="false" static="false" visibility="protected" line="53" package="Default">
        <name>$id</name>
        <default/>
        <docblock>
          <description>An unique ID to identify this map, useful when manipulating an array of
maps. This is also used as the ID for the &lt;div&gt; element.</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="string" line="47">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="60" package="Default">
        <name>$overlays</name>
        <default>array</default>
        <docblock>
          <description>Array holding all overlays added to this map instance.</description>
          <long-description>
</long-description>
          <tag name="since" description="0.2.0" line="55"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="67" package="Default">
        <name>$_overlay_types</name>
        <default>array</default>
        <docblock>
          <description>Supported overlay types.</description>
          <long-description>
</long-description>
          <tag name="since" description="0.2.0" line="62"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="73" package="Default">
        <name>$markers</name>
        <default>array</default>
        <docblock>
          <description>A collection of map markers. Each element of the array should be an
object of type Marker.</description>
          <long-description>
</long-description>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="81" package="Default">
        <name>$parameters</name>
        <default/>
        <docblock>
          <description>A set of parameters to append to configure how the Maps JavaScript API is
loaded.</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="\NoiseLabs\ToolKit\ParameterBag" line="75">
            <type by_reference="false">\NoiseLabs\ToolKit\ParameterBag</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="89" package="Default">
        <name>$options</name>
        <default/>
        <docblock>
          <description>GoogleMaps configuration. This covers settings like zoom level to the
usage of HTTPS.</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="\NoiseLabs\ToolKit\ParameterBag" line="83">
            <type by_reference="false">\NoiseLabs\ToolKit\ParameterBag</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="91" package="Default">
        <name>$https</name>
        <default>false</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="96" package="Default">
        <name>__construct</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
        </docblock>
        <argument line="96">
          <name>$id</name>
          <default>map</default>
          <type/>
        </argument>
        <argument line="96">
          <name>$options</name>
          <default>array</default>
          <type>array</type>
        </argument>
        <argument line="96">
          <name>$parameters</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="111" package="Default">
        <name>getOptionsDefaults</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="159" package="Default">
        <name>setId</name>
        <argument line="159">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="164" package="Default">
        <name>getId</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="172" package="Default">
        <name>addOverlay</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="since" description="0.2.0" line="169"/>
        </docblock>
        <argument line="172">
          <name>$overlay</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="182" package="Default">
        <name>getOverlays</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="param" description="" type="" variable="$type" line="177"/>
          <tag name="since" description="0.2.0" line="177"/>
        </docblock>
        <argument line="182">
          <name>$type</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="192" package="Default">
        <name>hasOverlays</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="param" description="" type="\NoiseLabs\ToolKit\GoogleAPI\Maps\unknown_type" variable="$type" line="187">
            <type by_reference="false">\NoiseLabs\ToolKit\GoogleAPI\Maps\unknown_type</type>
          </tag>
          <tag name="since" description="0.2.0" line="187"/>
        </docblock>
        <argument line="192">
          <name>$type</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="200" package="Default">
        <name>getOverlayTypes</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="since" description="0.2.0" line="197"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="205" package="Default">
        <name>hasMarkers</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="218" package="Default">
        <name>hasMarker</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="deprecated" description="Please use hasOverlay() instead." line="213"/>
          <tag name="param" description="" type="\NoiseLabs\ToolKit\GoogleAPI\Maps\Overlay\Marker" variable="$marker" line="213">
            <type by_reference="false">\NoiseLabs\ToolKit\GoogleAPI\Maps\Overlay\Marker</type>
          </tag>
        </docblock>
        <argument line="218">
          <name>$marker</name>
          <default/>
          <type>Marker</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="229" package="Default">
        <name>addMarker</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="deprecated" description="Please use addOverlay() instead." line="223"/>
          <tag name="param" description="" type="\NoiseLabs\ToolKit\GoogleAPI\Maps\Overlay\Marker" variable="$marker" line="223">
            <type by_reference="false">\NoiseLabs\ToolKit\GoogleAPI\Maps\Overlay\Marker</type>
          </tag>
          <tag name="param" description="" type="\NoiseLabs\ToolKit\GoogleAPI\Maps\unknown_type" variable="$focus" line="223">
            <type by_reference="false">\NoiseLabs\ToolKit\GoogleAPI\Maps\unknown_type</type>
          </tag>
        </docblock>
        <argument line="229">
          <name>$marker</name>
          <default/>
          <type>Marker</type>
        </argument>
        <argument line="229">
          <name>$focus</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="238" package="Default">
        <name>removeMarker</name>
        <argument line="238">
          <name>$marker</name>
          <default/>
          <type>Marker</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="248" package="Default">
        <name>setMarkers</name>
        <argument line="248">
          <name>$markers</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="253" package="Default">
        <name>getMarkers</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="261" package="Default">
        <name>hasFocus</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="since" description="0.2.0" line="258"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="272" package="Default">
        <name>setFocus</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="param" description="Marker instance or array index" type="\NoiseLabs\ToolKit\GoogleAPI\Maps\$data" variable="$data" line="266">
            <type by_reference="false">\NoiseLabs\ToolKit\GoogleAPI\Maps\$data</type>
          </tag>
          <tag name="param" description="Zoom level to apply" type="\NoiseLabs\ToolKit\GoogleAPI\Maps\$zoom" variable="$zoom" line="266">
            <type by_reference="false">\NoiseLabs\ToolKit\GoogleAPI\Maps\$zoom</type>
          </tag>
          <tag name="since" description="0.2.0" line="266"/>
        </docblock>
        <argument line="272">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
        <argument line="272">
          <name>$zoom</name>
          <default>16</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="290" package="Default">
        <name>clearFocus</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="since" description="0.2.0" line="287"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="296" package="Default">
        <name>create</name>
      </method>
    </class>
  </file>
  <file path="NoiseLabs/ToolKit/GoogleAPI/Maps/StaticMap.php" hash="b12d5b331649988d62a9f3dcfc86d926" package="GoogleAPI">
    <docblock>
      <description>This file is part of NoiseLabs-PHP-ToolKit</description>
      <long-description>&lt;p&gt;NoiseLabs-PHP-ToolKit is free software; you can redistribute it
and/or modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.&lt;/p&gt;

&lt;p&gt;NoiseLabs-PHP-ToolKit is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.&lt;/p&gt;

&lt;p&gt;You should have received a copy of the GNU Lesser General Public
License along with NoiseLabs-PHP-ToolKit; if not, see
&lt;a href="http://www.gnu.org/licenses/"&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Copyright (C) 2011 V&#xED;tor Brand&#xE3;o&lt;/p&gt;
</long-description>
      <tag name="category" description="NoiseLabs"/>
      <tag name="package" description="GoogleAPI"/>
      <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="copyright" description="(C) 2011 V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="license" description="http://www.gnu.org/licenses/lgpl-3.0-standalone.html LGPL-3"/>
      <tag name="link" description="http://www.noiselabs.org" link="http://www.noiselabs.org"/>
      <tag name="since" description="0.1.0"/>
    </docblock>
    <parse_markers>
      <error line="34">No DocBlock was found for Class StaticMap</error>
      <error line="36">No DocBlock was found for Method render</error>
    </parse_markers>
    <namespace-alias name="BaseMap">NoiseLabs\ToolKit\GoogleAPI\Maps\BaseMap</namespace-alias>
    <class final="false" abstract="false" line="34" namespace="NoiseLabs\ToolKit\GoogleAPI\Maps" package="Default">
      <name>StaticMap</name>
      <extends>\NoiseLabs\ToolKit\GoogleAPI\Maps\BaseMap</extends>
      <full_name>\NoiseLabs\ToolKit\GoogleAPI\Maps\StaticMap</full_name>
      <method final="false" abstract="false" static="false" visibility="public" line="36" package="Default">
        <name>render</name>
      </method>
    </class>
  </file>
  <file path="NoiseLabs/ToolKit/GoogleAPI/Maps/MapInterface.php" hash="147bba9e28394d2e39003b78f17ea65f" package="GoogleAPI">
    <docblock>
      <description>This file is part of NoiseLabs-PHP-ToolKit</description>
      <long-description>&lt;p&gt;NoiseLabs-PHP-ToolKit is free software; you can redistribute it
and/or modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.&lt;/p&gt;

&lt;p&gt;NoiseLabs-PHP-ToolKit is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.&lt;/p&gt;

&lt;p&gt;You should have received a copy of the GNU Lesser General Public
License along with NoiseLabs-PHP-ToolKit; if not, see
&lt;a href="http://www.gnu.org/licenses/"&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Copyright (C) 2011 V&#xED;tor Brand&#xE3;o&lt;/p&gt;
</long-description>
      <tag name="category" description="NoiseLabs"/>
      <tag name="package" description="GoogleAPI"/>
      <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="copyright" description="(C) 2011 V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="license" description="http://www.gnu.org/licenses/lgpl-3.0-standalone.html LGPL-3"/>
      <tag name="link" description="http://www.noiselabs.org" link="http://www.noiselabs.org"/>
      <tag name="since" description="0.1.0"/>
    </docblock>
    <parse_markers>
      <error line="34">No DocBlock was found for Interface MapInterface</error>
      <error line="36">No DocBlock was found for Method setId</error>
      <error line="37">No DocBlock was found for Method getId</error>
      <error line="38">No DocBlock was found for Method addOverlay</error>
      <error line="39">No DocBlock was found for Method hasOverlays</error>
      <error line="40">No DocBlock was found for Method hasMarker</error>
      <error line="41">No DocBlock was found for Method setMarkers</error>
      <error line="42">No DocBlock was found for Method getMarkers</error>
      <error line="43">No DocBlock was found for Method addMarker</error>
      <error line="44">No DocBlock was found for Method removeMarker</error>
      <error line="45">No DocBlock was found for Method render</error>
    </parse_markers>
    <namespace-alias name="Marker">NoiseLabs\ToolKit\GoogleAPI\Maps\Overlay\Marker</namespace-alias>
    <interface namespace="NoiseLabs\ToolKit\GoogleAPI\Maps" line="34" package="Default">
      <name>MapInterface</name>
      <extends/>
      <full_name>\NoiseLabs\ToolKit\GoogleAPI\Maps\MapInterface</full_name>
      <method final="false" abstract="false" static="false" visibility="public" line="36" package="Default">
        <name>setId</name>
        <argument line="36">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="37" package="Default">
        <name>getId</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="38" package="Default">
        <name>addOverlay</name>
        <argument line="38">
          <name>$overlay</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="39" package="Default">
        <name>hasOverlays</name>
        <argument line="39">
          <name>$type</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="40" package="Default">
        <name>hasMarker</name>
        <argument line="40">
          <name>$marker</name>
          <default/>
          <type>Marker</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="41" package="Default">
        <name>setMarkers</name>
        <argument line="41">
          <name>$markers</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="42" package="Default">
        <name>getMarkers</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="43" package="Default">
        <name>addMarker</name>
        <argument line="43">
          <name>$marker</name>
          <default/>
          <type>Marker</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="44" package="Default">
        <name>removeMarker</name>
        <argument line="44">
          <name>$marker</name>
          <default/>
          <type>Marker</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="45" package="Default">
        <name>render</name>
      </method>
    </interface>
  </file>
  <file path="NoiseLabs/ToolKit/GoogleAPI/Maps/Overlay/Icon.php" hash="731818c6995c7e56634aaef43dba0ede" package="GoogleAPI">
    <docblock>
      <description>This file is part of NoiseLabs-PHP-ToolKit</description>
      <long-description>&lt;p&gt;NoiseLabs-PHP-ToolKit is free software; you can redistribute it
and/or modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.&lt;/p&gt;

&lt;p&gt;NoiseLabs-PHP-ToolKit is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.&lt;/p&gt;

&lt;p&gt;You should have received a copy of the GNU Lesser General Public
License along with NoiseLabs-PHP-ToolKit; if not, see
&lt;a href="http://www.gnu.org/licenses/"&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Copyright (C) 2011 V&#xED;tor Brand&#xE3;o&lt;/p&gt;
</long-description>
      <tag name="category" description="NoiseLabs"/>
      <tag name="package" description="GoogleAPI"/>
      <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="copyright" description="(C) 2011 V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="license" description="http://www.gnu.org/licenses/lgpl-3.0-standalone.html LGPL-3"/>
      <tag name="link" description="http://www.noiselabs.org" link="http://www.noiselabs.org"/>
      <tag name="since" description="0.2.0"/>
    </docblock>
    <parse_markers>
      <error line="64">No DocBlock was found for Property $image</error>
    </parse_markers>
    <namespace-alias name="BaseOverlay">NoiseLabs\ToolKit\GoogleAPI\Maps\Overlay\BaseOverlay</namespace-alias>
    <class final="false" abstract="false" line="62" namespace="NoiseLabs\ToolKit\GoogleAPI\Maps\Overlay" package="Default">
      <name>Icon</name>
      <extends>\NoiseLabs\ToolKit\GoogleAPI\Maps\Overlay\BaseOverlay</extends>
      <full_name>\NoiseLabs\ToolKit\GoogleAPI\Maps\Overlay\Icon</full_name>
      <docblock>
        <description>Markers may define an icon to show in place of the default icon. Defining an
icon involves setting a number of properties that define the visual behavior
of the marker.</description>
        <long-description>&lt;p&gt;Simple Icons:
In the most basic case, an icon can simply indicate an image to use instead
of the default Google Maps pushpin icon by setting the marker's icon property
to the URL of an image. The Google Maps API will size the icon automatically
in this case.&lt;/p&gt;

&lt;p&gt;Complex Icons:
More complex icons will want to specify complex shapes (which indicate
regions that are clickable), add shadow images, and specify the "stack order"
of how they should display relative to other overlays.
Shadow images should generally be created at a 45 degree angle (upward and to
the right) from the main image, and the bottom left corner of the shadow
image should align with the bottom-left corner of the icon image. Shadow
images should be 24-bit PNG images with alpha transparency so that image
boundaries appear correctly on the map.&lt;/p&gt;

&lt;p&gt;When dealing with "complex icons" the GoogleMaps Javascript API require the
usage of a MarkerImage class but this PHP library uses the same Icon class
for both "simple" and "complex" icons.&lt;/p&gt;
</long-description>
        <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;" line="34"/>
        <tag name="since" description="0.2.0" line="34"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="64" package="Default">
        <name>$image</name>
        <default/>
      </property>
    </class>
  </file>
  <file path="NoiseLabs/ToolKit/GoogleAPI/Maps/Overlay/InfoWindow.php" hash="77c2aa6af43b99eb054d2ab6692da7aa" package="GoogleAPI">
    <docblock>
      <description>This file is part of NoiseLabs-PHP-ToolKit</description>
      <long-description>&lt;p&gt;NoiseLabs-PHP-ToolKit is free software; you can redistribute it
and/or modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.&lt;/p&gt;

&lt;p&gt;NoiseLabs-PHP-ToolKit is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.&lt;/p&gt;

&lt;p&gt;You should have received a copy of the GNU Lesser General Public
License along with NoiseLabs-PHP-ToolKit; if not, see
&lt;a href="http://www.gnu.org/licenses/"&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Copyright (C) 2011 V&#xED;tor Brand&#xE3;o&lt;/p&gt;
</long-description>
      <tag name="category" description="NoiseLabs"/>
      <tag name="package" description="GoogleAPI"/>
      <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="copyright" description="(C) 2011 V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="license" description="http://www.gnu.org/licenses/lgpl-3.0-standalone.html LGPL-3"/>
      <tag name="link" description="http://www.noiselabs.org" link="http://www.noiselabs.org"/>
      <tag name="since" description="0.2.0"/>
    </docblock>
    <parse_markers>
      <error line="46">No DocBlock was found for Constant OVERLAY_TYPE</error>
    </parse_markers>
    <namespace-alias name="BaseOverlay">NoiseLabs\ToolKit\GoogleAPI\Maps\Overlay\BaseOverlay</namespace-alias>
    <class final="false" abstract="false" line="44" namespace="NoiseLabs\ToolKit\GoogleAPI\Maps\Overlay" package="Default">
      <name>InfoWindow</name>
      <extends>\NoiseLabs\ToolKit\GoogleAPI\Maps\Overlay\BaseOverlay</extends>
      <full_name>\NoiseLabs\ToolKit\GoogleAPI\Maps\Overlay\InfoWindow</full_name>
      <docblock>
        <description>InfoWindows displays content in a floating window above the map. The info
window looks a little like a comic-book word balloon; it has a content area
and a tapered stem, where the tip of the stem is at a specified location on
the map. You can see the info window in action by clicking business markers
on Google Maps.</description>
        <long-description>
</long-description>
        <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;" line="34"/>
        <tag name="since" description="0.2.0" line="34"/>
      </docblock>
      <constant namespace="NoiseLabs\ToolKit\GoogleAPI\Maps\Overlay" line="46" package="Default">
        <name>OVERLAY_TYPE</name>
        <value>infowindow</value>
      </constant>
      <property final="false" static="false" visibility="public" line="55" package="Default">
        <name>$content</name>
        <default/>
        <docblock>
          <description>Content to display in the InfoWindow. This can be an HTML element, a
plain-text string, or a string containing HTML. The InfoWindow will be
sized according to the content. To set an explicit size for the content,
set content to be a HTML element with that size.</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="string" line="47">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="NoiseLabs/ToolKit/GoogleAPI/Maps/Overlay/Polyline.php" hash="a5dabd262a4190ce6ea7aa1b1dc81199" package="GoogleAPI">
    <docblock>
      <description>This file is part of NoiseLabs-PHP-ToolKit</description>
      <long-description>&lt;p&gt;NoiseLabs-PHP-ToolKit is free software; you can redistribute it
and/or modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.&lt;/p&gt;

&lt;p&gt;NoiseLabs-PHP-ToolKit is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.&lt;/p&gt;

&lt;p&gt;You should have received a copy of the GNU Lesser General Public
License along with NoiseLabs-PHP-ToolKit; if not, see
&lt;a href="http://www.gnu.org/licenses/"&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Copyright (C) 2011 V&#xED;tor Brand&#xE3;o&lt;/p&gt;
</long-description>
      <tag name="category" description="NoiseLabs"/>
      <tag name="package" description="GoogleAPI"/>
      <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="copyright" description="(C) 2011 V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="license" description="http://www.gnu.org/licenses/lgpl-3.0-standalone.html LGPL-3"/>
      <tag name="link" description="http://www.noiselabs.org" link="http://www.noiselabs.org"/>
      <tag name="since" description="0.2.0"/>
    </docblock>
    <parse_markers>
      <error line="45">No DocBlock was found for Constant OVERLAY_TYPE</error>
      <error line="47">No DocBlock was found for Property $markers</error>
      <error line="86">No DocBlock was found for Method create</error>
      <notice line="118">Argument $marker is missing from the function Docblock</notice>
      <notice line="126">Argument $marker is missing from the function Docblock</notice>
      <notice line="126">Argument $focus is missing from the function Docblock</notice>
      <notice line="134">Argument $marker is missing from the function Docblock</notice>
      <notice line="147">Argument $markers is missing from the function Docblock</notice>
      <error line="152">No DocBlock was found for Method getMarkers</error>
      <error line="157">No DocBlock was found for Method buildJavascriptOutput</error>
    </parse_markers>
    <namespace-alias name="BaseOverlay">NoiseLabs\ToolKit\GoogleAPI\Maps\Overlay\BaseOverlay</namespace-alias>
    <class final="false" abstract="false" line="43" namespace="NoiseLabs\ToolKit\GoogleAPI\Maps\Overlay" package="Default">
      <name>Polyline</name>
      <extends>\NoiseLabs\ToolKit\GoogleAPI\Maps\Overlay\BaseOverlay</extends>
      <full_name>\NoiseLabs\ToolKit\GoogleAPI\Maps\Overlay\Polyline</full_name>
      <docblock>
        <description>The Polyline class defines a linear overlay of connected line segments on the
map. A Polyline object consists of an array of LatLng locations, and creates
a series of line segments that connect those locations in an ordered
sequence.</description>
        <long-description>
</long-description>
        <tag name="since" description="0.2.0" line="34"/>
        <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;" line="34"/>
      </docblock>
      <constant namespace="NoiseLabs\ToolKit\GoogleAPI\Maps\Overlay" line="45" package="Default">
        <name>OVERLAY_TYPE</name>
        <value>polyline</value>
      </constant>
      <property final="false" static="false" visibility="public" line="47" package="Default">
        <name>$markers</name>
        <default>array</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" line="63" package="Default">
        <name>getDefaultOptions</name>
        <docblock>
          <description>Polylines are drawn as a series of straight segments on the map. You can
specify custom colors, weights, and opacities for the stroke of the line
within a Polyline options object used when constructing your line, or
change those properties after construction. A polyline supports the
following stroke styles:
- strokeColor specifies a hexadecimal HTML color of the format "#FFFFFF".</description>
          <long-description>&lt;p&gt;The Polyline class does not support named colors.
- strokeOpacity specifies a numerical fractional value between 0.0 and
1.0 (default) of the opacity of the line's color.
- strokeWeight specifies the weight of the line's stroke in pixels.&lt;/p&gt;
</long-description>
          <tag name="since" description="0.2.0" line="49"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="81" package="Default">
        <name>getRandomColor</name>
        <docblock>
          <description>A simple method to calculate a random color for the polyline segments.</description>
          <long-description>&lt;p&gt;This method is called when option 'randomStrokeColor' is set to TRUE.&lt;/p&gt;

&lt;p&gt;An hex color between #000000 and #ffffff is returned.&lt;/p&gt;
</long-description>
          <tag name="since" description="0.2.0" line="73"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="86" package="Default">
        <name>create</name>
        <argument line="86">
          <name>$markers</name>
          <default>array</default>
          <type>array</type>
        </argument>
        <argument line="86">
          <name>$options</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="107" package="Default">
        <name>hasMarkers</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="since" description="0.2.0" line="104"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="118" package="Default">
        <name>hasMarker</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="since" description="0.2.0" line="115"/>
        </docblock>
        <argument line="118">
          <name>$marker</name>
          <default/>
          <type>Marker</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="126" package="Default">
        <name>addMarker</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="since" description="0.2.0" line="123"/>
        </docblock>
        <argument line="126">
          <name>$marker</name>
          <default/>
          <type>Marker</type>
        </argument>
        <argument line="126">
          <name>$focus</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="134" package="Default">
        <name>removeMarker</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="since" description="0.2.0" line="131"/>
        </docblock>
        <argument line="134">
          <name>$marker</name>
          <default/>
          <type>Marker</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="147" package="Default">
        <name>setMarkers</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="since" description="0.2.0" line="144"/>
        </docblock>
        <argument line="147">
          <name>$markers</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="152" package="Default">
        <name>getMarkers</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="157" package="Default">
        <name>buildJavascriptOutput</name>
        <argument line="157">
          <name>$js_map_variable</name>
          <default/>
          <type/>
        </argument>
        <argument line="157">
          <name>$js_array_name</name>
          <default/>
          <type/>
        </argument>
        <argument line="157">
          <name>$js_array_index</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="NoiseLabs/ToolKit/GoogleAPI/Maps/Overlay/Marker.php" hash="4ef3ed0813272427314a2fc070ee42c0" package="GoogleAPI">
    <docblock>
      <description>This file is part of NoiseLabs-PHP-ToolKit</description>
      <long-description>&lt;p&gt;NoiseLabs-PHP-ToolKit is free software; you can redistribute it
and/or modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.&lt;/p&gt;

&lt;p&gt;NoiseLabs-PHP-ToolKit is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.&lt;/p&gt;

&lt;p&gt;You should have received a copy of the GNU Lesser General Public
License along with NoiseLabs-PHP-ToolKit; if not, see
&lt;a href="http://www.gnu.org/licenses/"&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Copyright (C) 2011 V&#xED;tor Brand&#xE3;o&lt;/p&gt;
</long-description>
      <tag name="category" description="NoiseLabs"/>
      <tag name="package" description="GoogleAPI"/>
      <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="copyright" description="(C) 2011 V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="license" description="http://www.gnu.org/licenses/lgpl-3.0-standalone.html LGPL-3"/>
      <tag name="link" description="http://www.noiselabs.org" link="http://www.noiselabs.org"/>
      <tag name="since" description="0.1.0"/>
    </docblock>
    <parse_markers>
      <error line="45">No DocBlock was found for Constant OVERLAY_TYPE</error>
      <error line="46">No DocBlock was found for Property $geolocation</error>
      <error line="47">No DocBlock was found for Property $icon</error>
      <error line="48">No DocBlock was found for Property $infowindow</error>
      <error line="50">No DocBlock was found for Method getDefaultOptions</error>
      <error line="59">No DocBlock was found for Method create</error>
      <error line="88">No DocBlock was found for Method setLatitude</error>
      <error line="93">No DocBlock was found for Method getLatitude</error>
      <error line="98">No DocBlock was found for Method setLongitude</error>
      <error line="103">No DocBlock was found for Method getLongitude</error>
      <error line="108">No DocBlock was found for Method buildJavascriptOutput</error>
    </parse_markers>
    <namespace-alias name="ParameterBag">NoiseLabs\ToolKit\GoogleAPI\ParameterBag</namespace-alias>
    <namespace-alias name="Geolocation">NoiseLabs\ToolKit\GoogleAPI\Maps\Geolocation</namespace-alias>
    <namespace-alias name="BaseOverlay">NoiseLabs\ToolKit\GoogleAPI\Maps\Overlay\BaseOverlay</namespace-alias>
    <namespace-alias name="InfoWindow">NoiseLabs\ToolKit\GoogleAPI\Maps\Overlay\InfoWindow</namespace-alias>
    <class final="false" abstract="false" line="43" namespace="NoiseLabs\ToolKit\GoogleAPI\Maps\Overlay" package="Default">
      <name>Marker</name>
      <extends>\NoiseLabs\ToolKit\GoogleAPI\Maps\Overlay\BaseOverlay</extends>
      <full_name>\NoiseLabs\ToolKit\GoogleAPI\Maps\Overlay\Marker</full_name>
      <docblock>
        <description/>
        <long-description>
</long-description>
        <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;" line="37"/>
        <tag name="since" description="0.1.0" line="37"/>
      </docblock>
      <constant namespace="NoiseLabs\ToolKit\GoogleAPI\Maps\Overlay" line="45" package="Default">
        <name>OVERLAY_TYPE</name>
        <value>marker</value>
      </constant>
      <property final="false" static="false" visibility="protected" line="46" package="Default">
        <name>$geolocation</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="47" package="Default">
        <name>$icon</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="48" package="Default">
        <name>$infowindow</name>
        <default/>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" line="50" package="Default">
        <name>getDefaultOptions</name>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="59" package="Default">
        <name>create</name>
        <argument line="59">
          <name>$latitude</name>
          <default/>
          <type/>
        </argument>
        <argument line="59">
          <name>$longitude</name>
          <default/>
          <type/>
        </argument>
        <argument line="59">
          <name>$options</name>
          <default>array</default>
          <type>array</type>
        </argument>
        <argument line="60">
          <name>$infowindow</name>
          <default>null</default>
          <type>InfoWindow</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="75" package="Default">
        <name>hasIcon</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="since" description="0.2.0" line="72"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="83" package="Default">
        <name>hasInfoWindow</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="since" description="0.2.0" line="80"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="88" package="Default">
        <name>setLatitude</name>
        <argument line="88">
          <name>$latitude</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="93" package="Default">
        <name>getLatitude</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="98" package="Default">
        <name>setLongitude</name>
        <argument line="98">
          <name>$longitude</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="103" package="Default">
        <name>getLongitude</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="108" package="Default">
        <name>buildJavascriptOutput</name>
        <argument line="108">
          <name>$js_map_variable</name>
          <default/>
          <type/>
        </argument>
        <argument line="108">
          <name>$js_array_name</name>
          <default/>
          <type/>
        </argument>
        <argument line="108">
          <name>$js_array_index</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="NoiseLabs/ToolKit/GoogleAPI/Maps/Overlay/BaseOverlay.php" hash="cc619dc7c9288298d6be6b00ecff0c47" package="GoogleAPI">
    <docblock>
      <description>This file is part of NoiseLabs-PHP-ToolKit</description>
      <long-description>&lt;p&gt;NoiseLabs-PHP-ToolKit is free software; you can redistribute it
and/or modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.&lt;/p&gt;

&lt;p&gt;NoiseLabs-PHP-ToolKit is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.&lt;/p&gt;

&lt;p&gt;You should have received a copy of the GNU Lesser General Public
License along with NoiseLabs-PHP-ToolKit; if not, see
&lt;a href="http://www.gnu.org/licenses/"&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Copyright (C) 2011 V&#xED;tor Brand&#xE3;o&lt;/p&gt;
</long-description>
      <tag name="category" description="NoiseLabs"/>
      <tag name="package" description="GoogleAPI"/>
      <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="copyright" description="(C) 2011 V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="license" description="http://www.gnu.org/licenses/lgpl-3.0-standalone.html LGPL-3"/>
      <tag name="link" description="http://www.noiselabs.org" link="http://www.noiselabs.org"/>
      <tag name="since" description="0.2.0"/>
    </docblock>
    <parse_markers>
      <error line="64">No DocBlock was found for Property $options</error>
      <error line="66">No DocBlock was found for Method __construct</error>
      <error line="71">No DocBlock was found for Method getDefaultOptions</error>
      <error line="73">No DocBlock was found for Method buildJavascriptOutput</error>
    </parse_markers>
    <namespace-alias name="ParameterBag">NoiseLabs\ToolKit\GoogleAPI\ParameterBag</namespace-alias>
    <class final="false" abstract="true" line="62" namespace="NoiseLabs\ToolKit\GoogleAPI\Maps\Overlay" package="Default">
      <name>BaseOverlay</name>
      <extends/>
      <full_name>\NoiseLabs\ToolKit\GoogleAPI\Maps\Overlay\BaseOverlay</full_name>
      <docblock>
        <description>Overlays are objects on the map that are tied to latitude/longitude
coordinates, so they move when you drag or zoom the map. Overlays reflect
objects that you "add" to the map to designate points, lines, areas, or
collections of objects.</description>
        <long-description>&lt;p&gt;The Maps API has several types of overlays:
- Single locations on the map are displayed using markers. Markers may
sometimes display custom icon images, in which case they are usually referred
to as "icons." Markers and icons are objects of type Marker.
- Lines on the map are displayed using polylines (representing an ordered
sequence of locations). Lines are objects of type Polyline.
- Areas of arbitrary shape on the map are displayed using polygons, which are
similar to polylines. Like polylines, polygons are an ordered sequence of
locations; unlike polylines, polygons define a region which they enclose.
- Map layers may be displayed using overlay map types. You can create your
own set of tiles by creating custom map types which either replace base map
tile sets, or display on top of existing base map tile sets as overlays.
- The info window is also a special kind of overlay for displaying content
(usually text or images) within a popup balloon on top of a map at a given
location.&lt;/p&gt;

&lt;p&gt;This class provides the base class (abstract) for each overlay type listed
above.&lt;/p&gt;
</long-description>
        <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;" line="34"/>
        <tag name="since" description="0.2.0" line="34"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="64" package="Default">
        <name>$options</name>
        <default/>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="66" package="Default">
        <name>__construct</name>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" line="71" package="Default">
        <name>getDefaultOptions</name>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" line="73" package="Default">
        <name>buildJavascriptOutput</name>
        <argument line="73">
          <name>$js_map_variable</name>
          <default/>
          <type/>
        </argument>
        <argument line="74">
          <name>$js_array_name</name>
          <default/>
          <type/>
        </argument>
        <argument line="74">
          <name>$js_array_index</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="NoiseLabs/ToolKit/GoogleAPI/GoogleMap.php" hash="b88349986ef342bbcaf68d729286ed59" package="ToolKit&#10;Phoogle Maps 2\0 | Uses Google Maps API to create customizable maps&#10;that can be embedded on your website&#10;Copyright (C) 2005  Justin Johnson&#10;This program is free software; you can redistribute it and/or modify&#10;it under the terms of the GNU General Public License as published by&#10;the Free Software Foundation; either version 2 of the License, or&#10;(at your option) any later version\&#10;This program is distributed in the hope that it will be useful,&#10;but WITHOUT ANY WARRANTY; without even the implied warranty of&#10;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE\  See the&#10;GNU General Public License for more details\&#10;You should have received a copy of the GNU General Public License&#10;along with this program; if not, write to the Free Software&#10;Foundation, Inc\, 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA&#10;Phoogle Maps 2\0&#10;Uses Google Maps Mapping API to create customizable Google Maps that can be&#10;embedded on your website">
    <docblock>
      <description/>
      <long-description>
</long-description>
      <tag name="category" description="NoiseLabs"/>
      <tag name="package" description="ToolKit&#10;Phoogle Maps 2.0 | Uses Google Maps API to create customizable maps&#10;that can be embedded on your website&#10;Copyright (C) 2005  Justin Johnson&#10;This program is free software; you can redistribute it and/or modify&#10;it under the terms of the GNU General Public License as published by&#10;the Free Software Foundation; either version 2 of the License, or&#10;(at your option) any later version.&#10;This program is distributed in the hope that it will be useful,&#10;but WITHOUT ANY WARRANTY; without even the implied warranty of&#10;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#10;GNU General Public License for more details.&#10;You should have received a copy of the GNU General Public License&#10;along with this program; if not, write to the Free Software&#10;Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA&#10;Phoogle Maps 2.0&#10;Uses Google Maps Mapping API to create customizable Google Maps that can be&#10;embedded on your website"/>
      <tag name="author" description="Justin Johnson &lt;justinjohnson@system7designs.com&gt;"/>
      <tag name="copyright" description="2005 system7designs"/>
    </docblock>
    <parse_markers>
      <error line="49">No DocBlock was found for Constant LOCALHOST_API_KEY</error>
      <notice line="110">Argument $options is missing from the function Docblock</notice>
      <notice line="122">Argument $lat is missing from the function Docblock</notice>
      <notice line="122">Argument $long is missing from the function Docblock</notice>
      <notice line="122">Argument $infoHTML is missing from the function Docblock</notice>
      <notice line="134">Argument $lat is missing from the function Docblock</notice>
      <notice line="134">Argument $long is missing from the function Docblock</notice>
      <notice line="147">Name of argument $address does not match with function Docblock</notice>
      <notice line="147">Argument $htmlMessage is missing from the function Docblock</notice>
      <notice line="181">Name of argument $displayType does not match with function Docblock</notice>
      <notice line="181">Name of argument $css_id does not match with function Docblock</notice>
      <notice line="208">Name of argument $displayType does not match with function Docblock</notice>
      <notice line="208">Name of argument $css_id does not match with function Docblock</notice>
      <notice line="233">Name of argument $width does not match with function Docblock</notice>
      <notice line="244">Name of argument $height does not match with function Docblock</notice>
      <notice line="255">Name of argument $key does not match with function Docblock</notice>
      <error line="330">No DocBlock was found for Method xml2array</error>
      <error line="344">No DocBlock was found for Method startElement</error>
      <error line="351">No DocBlock was found for Method characterData</error>
      <error line="358">No DocBlock was found for Method endElement</error>
    </parse_markers>
    <class final="false" abstract="false" line="47" namespace="NoiseLabs\ToolKit\GoogleAPI" package="Default">
      <name>GoogleMap</name>
      <extends/>
      <full_name>\NoiseLabs\ToolKit\GoogleAPI\GoogleMap</full_name>
      <docblock>
        <description>Uses Google Maps API to create customizable maps that can be embedded on your
website.</description>
        <long-description>&lt;p&gt;This class is a rewrite of the original PhoogleMap class created by Justin
Johnson (system7designs).&lt;/p&gt;
</long-description>
        <tag name="author" description="Justin Johnson &lt;justinjohnson@system7designs.com&gt;" line="34"/>
        <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;" line="34"/>
        <tag name="deprecated" description="GoogleMap class is deprecated and marked for removal once 0.2.0&#10;becomes stable. Please avoid usage." line="34"/>
      </docblock>
      <constant namespace="NoiseLabs\ToolKit\GoogleAPI" line="49" package="Default">
        <name>LOCALHOST_API_KEY</name>
        <value>ABQIAAAAdi_0xCw-nuskZRWE2Z6PBhT2yXp_ZAY8_ufC3CFXhHIE1NvwkxR3tBq3ZXP3CHmGs13Ec_yYzjqSfA</value>
      </constant>
      <property final="false" static="false" visibility="public" line="55" package="Default">
        <name>$validPoints</name>
        <default>array</default>
        <docblock>
          <description>validPoints : array
Holds addresses and HTML Messages for points that are valid (ie: have longitude and latitutde)</description>
          <long-description>
</long-description>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="61" package="Default">
        <name>$invalidPoints</name>
        <default>array</default>
        <docblock>
          <description>invalidPoints : array
Holds addresses and HTML Messages for points that are invalid (ie: don't have longitude and latitutde)</description>
          <long-description>
</long-description>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="67" package="Default">
        <name>$mapWidth</name>
        <default>300</default>
        <docblock>
          <description>mapWidth
width of the Google Map, in pixels</description>
          <long-description>
</long-description>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="73" package="Default">
        <name>$mapHeight</name>
        <default>300</default>
        <docblock>
          <description>mapHeight
height of the Google Map, in pixels</description>
          <long-description>
</long-description>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="79" package="Default">
        <name>$apiKey</name>
        <default/>
        <docblock>
          <description>apiKey
Google API Key</description>
          <long-description>
</long-description>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="85" package="Default">
        <name>$showControl</name>
        <default>true</default>
        <docblock>
          <description>showControl
True/False whether to show map controls or not</description>
          <long-description>
</long-description>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="91" package="Default">
        <name>$showType</name>
        <default>true</default>
        <docblock>
          <description>showType
True/False whether to show map type controls or not</description>
          <long-description>
</long-description>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="98" package="Default">
        <name>$controlType</name>
        <default>small</default>
        <docblock>
          <description>controlType
string: can be 'small' or 'large'
display's either the large or the small controls on the map, small by default</description>
          <long-description>
</long-description>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="105" package="Default">
        <name>$zoomLevel</name>
        <default>4</default>
        <docblock>
          <description>zoomLevel
int: 0-17
set's the initial zoom level of the map</description>
          <long-description>
</long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" line="110" package="Default">
        <name>create</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
        </docblock>
        <argument line="110">
          <name>$options</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="122" package="Default">
        <name>addGeoPoint</name>
        <docblock>
          <description>Add's an address to be displayed on the Google Map using latitude/longitude
early version of this function, considered experimental.</description>
          <long-description>
</long-description>
        </docblock>
        <argument line="122">
          <name>$lat</name>
          <default/>
          <type/>
        </argument>
        <argument line="122">
          <name>$long</name>
          <default/>
          <type/>
        </argument>
        <argument line="122">
          <name>$infoHTML</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="134" package="Default">
        <name>centerMap</name>
        <docblock>
          <description>Center's Google Map on a specific point (thus eliminating the need for
two different show methods from version 1.0).</description>
          <long-description>
</long-description>
        </docblock>
        <argument line="134">
          <name>$lat</name>
          <default/>
          <type/>
        </argument>
        <argument line="134">
          <name>$long</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="147" package="Default">
        <name>addAddress</name>
        <docblock>
          <description>Add's an address to be displayed on the Google Map (thus eliminating the
need for two different show methods from version 1.0).</description>
          <long-description>
</long-description>
          <tag name="param" description="" type="" variable="$address:string" line="139"/>
          <tag name="return" description="True:False (True if address has long/lat, false if it doesn't)" type="Boolean" line="139">
            <type by_reference="false">Boolean</type>
          </tag>
        </docblock>
        <argument line="147">
          <name>$address</name>
          <default/>
          <type/>
        </argument>
        <argument line="147">
          <name>$htmlMessage</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="181" package="Default">
        <name>showValidPoints</name>
        <docblock>
          <description>Displays either a table or a list of the address points that are valid.</description>
          <long-description>&lt;p&gt;Mainly used for debugging but could be useful for showing a list of
addresses on the map.&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="" variable="$displayType:string" line="172"/>
          <tag name="param" description="" type="" variable="$css_id:string" line="172"/>
          <tag name="return" description="" type="\NoiseLabs\ToolKit\GoogleAPI\nothing" line="172">
            <type by_reference="false">\NoiseLabs\ToolKit\GoogleAPI\nothing</type>
          </tag>
        </docblock>
        <argument line="181">
          <name>$displayType</name>
          <default/>
          <type/>
        </argument>
        <argument line="181">
          <name>$css_id</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="208" package="Default">
        <name>showInvalidPoints</name>
        <docblock>
          <description>Displays either a table or a list of the address points that are invalid.</description>
          <long-description>&lt;p&gt;Mainly used for debugging shows only the points that are NOT on the map.&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="" variable="$displayType:string" line="200"/>
          <tag name="param" description="" type="" variable="$css_id:string" line="200"/>
          <tag name="return" description="" type="\NoiseLabs\ToolKit\GoogleAPI\nothing" line="200">
            <type by_reference="false">\NoiseLabs\ToolKit\GoogleAPI\nothing</type>
          </tag>
        </docblock>
        <argument line="208">
          <name>$displayType</name>
          <default/>
          <type/>
        </argument>
        <argument line="208">
          <name>$css_id</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="233" package="Default">
        <name>setWidth</name>
        <docblock>
          <description>Sets the width of the map to be displayed.</description>
          <long-description>
</long-description>
          <tag name="param" description="" type="" variable="$width:int" line="227"/>
          <tag name="return" description="" type="\NoiseLabs\ToolKit\GoogleAPI\nothing" line="227">
            <type by_reference="false">\NoiseLabs\ToolKit\GoogleAPI\nothing</type>
          </tag>
        </docblock>
        <argument line="233">
          <name>$width</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="244" package="Default">
        <name>setHeight</name>
        <docblock>
          <description>Sets the height of the map to be displayed</description>
          <long-description>
</long-description>
          <tag name="param" description="" type="" variable="$height:int" line="238"/>
          <tag name="return" description="" type="\NoiseLabs\ToolKit\GoogleAPI\nothing" line="238">
            <type by_reference="false">\NoiseLabs\ToolKit\GoogleAPI\nothing</type>
          </tag>
        </docblock>
        <argument line="244">
          <name>$height</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="255" package="Default">
        <name>setAPIkey</name>
        <docblock>
          <description>Stores the API Key acquired from Google.</description>
          <long-description>
</long-description>
          <tag name="param" description="" type="" variable="$key:string" line="249"/>
          <tag name="return" description="" type="\NoiseLabs\ToolKit\GoogleAPI\nothing" line="249">
            <type by_reference="false">\NoiseLabs\ToolKit\GoogleAPI\nothing</type>
          </tag>
        </docblock>
        <argument line="255">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="266" package="Default">
        <name>printGoogleJS</name>
        <docblock>
          <description>Adds the necessary Javascript for the Google Map to function should be
called in between the html &lt;head&gt;&lt;/head&gt; tags.</description>
          <long-description>
</long-description>
          <tag name="return" description="" type="\NoiseLabs\ToolKit\GoogleAPI\othing" line="260">
            <type by_reference="false">\NoiseLabs\ToolKit\GoogleAPI\othing</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="274" package="Default">
        <name>showMap</name>
        <docblock>
          <description>Displays the Google Map on the page.</description>
          <long-description>
</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="330" package="Default">
        <name>xml2array</name>
        <argument line="330">
          <name>$xml</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="344" package="Default">
        <name>startElement</name>
        <argument line="344">
          <name>$parser</name>
          <default/>
          <type/>
        </argument>
        <argument line="344">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="344">
          <name>$attrs</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="351" package="Default">
        <name>characterData</name>
        <argument line="351">
          <name>$parser</name>
          <default/>
          <type/>
        </argument>
        <argument line="351">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="358" package="Default">
        <name>endElement</name>
        <argument line="358">
          <name>$parser</name>
          <default/>
          <type/>
        </argument>
        <argument line="358">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="NoiseLabs/ToolKit/GoogleAPI/ParameterBag.php" hash="f870fab0ab1bef68374704b08f3a8884" package="Default">
    <parse_markers>
      <error line="3">No Page-level DocBlock was found</error>
      <error line="40">No DocBlock was found for Property $parameters</error>
    </parse_markers>
    <class final="false" abstract="false" line="38" namespace="NoiseLabs\ToolKit\GoogleAPI" package="Default">
      <name>ParameterBag</name>
      <extends/>
      <full_name>\NoiseLabs\ToolKit\GoogleAPI\ParameterBag</full_name>
      <docblock>
        <description>ParameterBag is a container for key/value pairs.</description>
        <long-description>
</long-description>
        <tag name="author" description="Fabien Potencier &lt;fabien@symfony.com&gt;" line="33"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="40" package="Default">
        <name>$parameters</name>
        <default/>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="47" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor.</description>
          <long-description>
</long-description>
          <tag name="param" description="An array of parameters" type="array" variable="$parameters" line="42">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="47">
          <name>$parameters</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="57" package="Default">
        <name>all</name>
        <docblock>
          <description>Returns the parameters.</description>
          <long-description>
</long-description>
          <tag name="return" description="An array of parameters" type="array" line="52">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="67" package="Default">
        <name>keys</name>
        <docblock>
          <description>Returns the parameter keys.</description>
          <long-description>
</long-description>
          <tag name="return" description="An array of parameter keys" type="array" line="62">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="77" package="Default">
        <name>replace</name>
        <docblock>
          <description>Replaces the current parameters by a new set.</description>
          <long-description>
</long-description>
          <tag name="param" description="An array of parameters" type="array" variable="$parameters" line="72">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="77">
          <name>$parameters</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="87" package="Default">
        <name>add</name>
        <docblock>
          <description>Adds parameters.</description>
          <long-description>
</long-description>
          <tag name="param" description="An array of parameters" type="array" variable="$parameters" line="82">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="87">
          <name>$parameters</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="99" package="Default">
        <name>get</name>
        <docblock>
          <description>Returns a parameter by name.</description>
          <long-description>
</long-description>
          <tag name="param" description="The key" type="string" variable="$path" line="92">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The default value" type="mixed" variable="$default" line="92">
            <type by_reference="false">mixed</type>
          </tag>
          <tag name="param" description="" type="boolean" variable="$deep" line="92">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="99">
          <name>$path</name>
          <default/>
          <type/>
        </argument>
        <argument line="99">
          <name>$default</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="99">
          <name>$deep</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="154" package="Default">
        <name>set</name>
        <docblock>
          <description>Sets a parameter by name.</description>
          <long-description>
</long-description>
          <tag name="param" description="The key" type="string" variable="$key" line="148">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The value" type="mixed" variable="$value" line="148">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="154">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="154">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="166" package="Default">
        <name>has</name>
        <docblock>
          <description>Returns true if the parameter is defined.</description>
          <long-description>
</long-description>
          <tag name="param" description="The key" type="string" variable="$key" line="159">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="true if the parameter exists, false otherwise" type="Boolean" line="159">
            <type by_reference="false">Boolean</type>
          </tag>
        </docblock>
        <argument line="166">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="176" package="Default">
        <name>remove</name>
        <docblock>
          <description>Removes a parameter.</description>
          <long-description>
</long-description>
          <tag name="param" description="The key" type="string" variable="$key" line="171">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="176">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="190" package="Default">
        <name>getAlpha</name>
        <docblock>
          <description>Returns the alphabetic characters of the parameter value.</description>
          <long-description>
</long-description>
          <tag name="param" description="The parameter key" type="string" variable="$key" line="181">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The default value" type="mixed" variable="$default" line="181">
            <type by_reference="false">mixed</type>
          </tag>
          <tag name="param" description="" type="boolean" variable="$deep" line="181">
            <type by_reference="false">boolean</type>
          </tag>
          <tag name="return" description="The filtered value" type="string" line="181">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="190">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="190">
          <name>$default</name>
          <default/>
          <type/>
        </argument>
        <argument line="190">
          <name>$deep</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="204" package="Default">
        <name>getAlnum</name>
        <docblock>
          <description>Returns the alphabetic characters and digits of the parameter value.</description>
          <long-description>
</long-description>
          <tag name="param" description="The parameter key" type="string" variable="$key" line="195">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The default value" type="mixed" variable="$default" line="195">
            <type by_reference="false">mixed</type>
          </tag>
          <tag name="param" description="" type="boolean" variable="$deep" line="195">
            <type by_reference="false">boolean</type>
          </tag>
          <tag name="return" description="The filtered value" type="string" line="195">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="204">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="204">
          <name>$default</name>
          <default/>
          <type/>
        </argument>
        <argument line="204">
          <name>$deep</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="218" package="Default">
        <name>getDigits</name>
        <docblock>
          <description>Returns the digits of the parameter value.</description>
          <long-description>
</long-description>
          <tag name="param" description="The parameter key" type="string" variable="$key" line="209">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The default value" type="mixed" variable="$default" line="209">
            <type by_reference="false">mixed</type>
          </tag>
          <tag name="param" description="" type="boolean" variable="$deep" line="209">
            <type by_reference="false">boolean</type>
          </tag>
          <tag name="return" description="The filtered value" type="string" line="209">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="218">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="218">
          <name>$default</name>
          <default/>
          <type/>
        </argument>
        <argument line="218">
          <name>$deep</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="232" package="Default">
        <name>getInt</name>
        <docblock>
          <description>Returns the parameter value converted to integer.</description>
          <long-description>
</long-description>
          <tag name="param" description="The parameter key" type="string" variable="$key" line="223">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The default value" type="mixed" variable="$default" line="223">
            <type by_reference="false">mixed</type>
          </tag>
          <tag name="param" description="" type="boolean" variable="$deep" line="223">
            <type by_reference="false">boolean</type>
          </tag>
          <tag name="return" description="The filtered value" type="string" line="223">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="232">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="232">
          <name>$default</name>
          <default>0</default>
          <type/>
        </argument>
        <argument line="232">
          <name>$deep</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="NoiseLabs/ToolKit/ConfigParser/NoSectionsConfigParserInterface.php" hash="ee2786e48efd04aef22891832adef9e4" package="ConfigParser">
    <docblock>
      <description>This file is part of NoiseLabs-PHP-ToolKit</description>
      <long-description>&lt;p&gt;NoiseLabs-PHP-ToolKit is free software; you can redistribute it
and/or modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.&lt;/p&gt;

&lt;p&gt;NoiseLabs-PHP-ToolKit is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.&lt;/p&gt;

&lt;p&gt;You should have received a copy of the GNU Lesser General Public
License along with NoiseLabs-PHP-ToolKit; if not, see
&lt;a href="http://www.gnu.org/licenses/"&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Copyright (C) 2011 V&#xED;tor Brand&#xE3;o &lt;a href="&amp;#109;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#116;&amp;#x6f;&amp;#58;&amp;#x6e;&amp;#111;&amp;#x69;&amp;#115;&amp;#x65;&amp;#98;&amp;#x6c;&amp;#101;&amp;#x65;&amp;#100;&amp;#x40;&amp;#110;&amp;#x6f;&amp;#105;&amp;#x73;&amp;#101;&amp;#x6c;&amp;#97;&amp;#x62;&amp;#115;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;&amp;#x6e;&amp;#111;&amp;#x69;&amp;#115;&amp;#x65;&amp;#98;&amp;#x6c;&amp;#101;&amp;#x65;&amp;#100;&amp;#x40;&amp;#110;&amp;#x6f;&amp;#105;&amp;#x73;&amp;#101;&amp;#x6c;&amp;#97;&amp;#x62;&amp;#115;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;
</long-description>
      <tag name="category" description="NoiseLabs"/>
      <tag name="package" description="ConfigParser"/>
      <tag name="version" description="version" plugin="doctrine" link="http://www.doctrine-project.org/docs/orm/2.1/en/reference/annotations-reference.html#annref-version" content=".1.">
        <argument field-name="">.1.</argument>
      </tag>
      <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="copyright" description="(C) 2011 V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
    </docblock>
    <parse_markers>
      <error line="38">No DocBlock was found for Method options</error>
    </parse_markers>
    <interface namespace="NoiseLabs\ToolKit\ConfigParser" line="36" package="Default">
      <name>NoSectionsConfigParserInterface</name>
      <extends/>
      <full_name>\NoiseLabs\ToolKit\ConfigParser\NoSectionsConfigParserInterface</full_name>
      <docblock>
        <description>The Interface for the NoSectionsConfigParser class.</description>
        <long-description>
</long-description>
        <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;" line="31"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" line="38" package="Default">
        <name>options</name>
      </method>
    </interface>
  </file>
  <file path="NoiseLabs/ToolKit/ConfigParser/ConfigParser.php" hash="de44b5f67b11e784638a627da352c6cf" package="ConfigParser">
    <docblock>
      <description>This file is part of NoiseLabs-PHP-ToolKit</description>
      <long-description>&lt;p&gt;NoiseLabs-PHP-ToolKit is free software; you can redistribute it
and/or modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.&lt;/p&gt;

&lt;p&gt;NoiseLabs-PHP-ToolKit is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.&lt;/p&gt;

&lt;p&gt;You should have received a copy of the GNU Lesser General Public
License along with NoiseLabs-PHP-ToolKit; if not, see
&lt;a href="http://www.gnu.org/licenses/"&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Copyright (C) 2011 V&#xED;tor Brand&#xE3;o &lt;a href="&amp;#109;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#116;&amp;#x6f;&amp;#58;&amp;#x6e;&amp;#111;&amp;#x69;&amp;#115;&amp;#x65;&amp;#98;&amp;#x6c;&amp;#101;&amp;#x65;&amp;#100;&amp;#x40;&amp;#110;&amp;#x6f;&amp;#105;&amp;#x73;&amp;#101;&amp;#x6c;&amp;#97;&amp;#x62;&amp;#115;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;&amp;#x6e;&amp;#111;&amp;#x69;&amp;#115;&amp;#x65;&amp;#98;&amp;#x6c;&amp;#101;&amp;#x65;&amp;#100;&amp;#x40;&amp;#110;&amp;#x6f;&amp;#105;&amp;#x73;&amp;#101;&amp;#x6c;&amp;#97;&amp;#x62;&amp;#115;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;
</long-description>
      <tag name="category" description="NoiseLabs"/>
      <tag name="package" description="ConfigParser"/>
      <tag name="version" description="version" plugin="doctrine" link="http://www.doctrine-project.org/docs/orm/2.1/en/reference/annotations-reference.html#annref-version" content=".1.">
        <argument field-name="">.1.</argument>
      </tag>
      <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="copyright" description="(C) 2011 V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
    </docblock>
    <markers>
      <todo line="310">write default section first</todo>
    </markers>
    <parse_markers>
      <error line="55">No DocBlock was found for Constant DEFAULT_SECTION</error>
      <error line="56">No DocBlock was found for Constant HAS_SECTIONS</error>
      <notice line="74">Argument $section is missing from the function Docblock</notice>
      <notice line="100">Argument $section is missing from the function Docblock</notice>
      <notice line="108">Argument $section is missing from the function Docblock</notice>
      <notice line="123">Argument $section is missing from the function Docblock</notice>
      <notice line="123">Argument $option is missing from the function Docblock</notice>
      <notice line="136">Argument $section is missing from the function Docblock</notice>
      <notice line="136">Argument $options is missing from the function Docblock</notice>
      <error line="152">No DocBlock was found for Method read</error>
      <notice line="212">Argument $section is missing from the function Docblock</notice>
      <notice line="212">Argument $option is missing from the function Docblock</notice>
      <notice line="212">Argument $fallback is missing from the function Docblock</notice>
      <notice line="221">Argument $section is missing from the function Docblock</notice>
      <notice line="221">Argument $option is missing from the function Docblock</notice>
      <notice line="221">Argument $fallback is missing from the function Docblock</notice>
      <notice line="234">Argument $section is missing from the function Docblock</notice>
      <notice line="234">Argument $option is missing from the function Docblock</notice>
      <notice line="234">Argument $fallback is missing from the function Docblock</notice>
      <notice line="261">Argument $section is missing from the function Docblock</notice>
      <notice line="261">Argument $option is missing from the function Docblock</notice>
      <notice line="261">Argument $value is missing from the function Docblock</notice>
      <error line="279">No DocBlock was found for Method _buildOptionValueLine</error>
      <error line="300">No DocBlock was found for Method _buildOutputString</error>
      <notice line="340">Argument $section is missing from the function Docblock</notice>
      <notice line="340">Argument $option is missing from the function Docblock</notice>
    </parse_markers>
    <namespace-alias name="BaseConfigParser">NoiseLabs\ToolKit\ConfigParser\BaseConfigParser</namespace-alias>
    <namespace-alias name="File">NoiseLabs\ToolKit\ConfigParser\File</namespace-alias>
    <namespace-alias name="DuplicateSectionException">NoiseLabs\ToolKit\ConfigParser\Exception\DuplicateSectionException</namespace-alias>
    <namespace-alias name="NoSectionException">NoiseLabs\ToolKit\ConfigParser\Exception\NoSectionException</namespace-alias>
    <namespace-alias name="NoOptionException">NoiseLabs\ToolKit\ConfigParser\Exception\NoOptionException</namespace-alias>
    <class final="false" abstract="false" line="53" namespace="NoiseLabs\ToolKit\ConfigParser" package="Default">
      <name>ConfigParser</name>
      <extends>\NoiseLabs\ToolKit\ConfigParser\BaseConfigParser</extends>
      <full_name>\NoiseLabs\ToolKit\ConfigParser\ConfigParser</full_name>
      <docblock>
        <description>The ConfigParser class implements a basic configuration language which
provides a structure similar to what&#x2019;s found in Microsoft Windows INI
files. You can use this to write PHP programs which can be customized by
end users easily.</description>
        <long-description>&lt;p&gt;DISCLAIMER:
Every docblock was shameless copied or at least adapted from Python's
configparser documentation page (version 3.0). See
http://docs.python.org/dev/library/configparser.html&lt;/p&gt;
</long-description>
        <tag name="note" description="This class does not interpret or write the value-type prefixes&#10;used in the Windows Registry extended version of INI syntax." line="37"/>
        <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;" line="37"/>
      </docblock>
      <implements>\NoiseLabs\ToolKit\ConfigParser\ConfigParserInterface</implements>
      <constant namespace="NoiseLabs\ToolKit\ConfigParser" line="55" package="Default">
        <name>DEFAULT_SECTION</name>
        <value>DEFAULT</value>
      </constant>
      <constant namespace="NoiseLabs\ToolKit\ConfigParser" line="56" package="Default">
        <name>HAS_SECTIONS</name>
        <value>true</value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" line="62" package="Default">
        <name>sections</name>
        <docblock>
          <description>Return a list of the sections available; the default section is not
included in the list.</description>
          <long-description>
</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="74" package="Default">
        <name>addSection</name>
        <docblock>
          <description>Add a section named section to the instance. If a section by the given
name already exists, DuplicateSectionException is raised. If the
default section name is passed, InvalidArgumentException is raised.</description>
          <long-description>&lt;p&gt;The name of the section must be a string; if not,
InvalidArgumentException is raised too.&lt;/p&gt;
</long-description>
        </docblock>
        <argument line="74">
          <name>$section</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="100" package="Default">
        <name>hasSection</name>
        <docblock>
          <description>Indicates whether the named section is present in the configuration.</description>
          <long-description>&lt;p&gt;The default section is not acknowledged.&lt;/p&gt;
</long-description>
        </docblock>
        <argument line="100">
          <name>$section</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="108" package="Default">
        <name>options</name>
        <docblock>
          <description>Return a list of options available in the specified section.</description>
          <long-description>
</long-description>
        </docblock>
        <argument line="108">
          <name>$section</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="123" package="Default">
        <name>hasOption</name>
        <docblock>
          <description>If the given section exists, and contains the given option, return
TRUE; otherwise return FALSE. If the specified section is NULL or an
empty string, DEFAULT is assumed.</description>
          <long-description>
</long-description>
        </docblock>
        <argument line="123">
          <name>$section</name>
          <default/>
          <type/>
        </argument>
        <argument line="123">
          <name>$option</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="136" package="Default">
        <name>setOptions</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="throws" description="if section doesn't exist" type="\NoiseLabs\ToolKit\ConfigParser\Exception\NoSectionException" line="133">
            <type by_reference="false">\NoiseLabs\ToolKit\ConfigParser\Exception\NoSectionException</type>
          </tag>
        </docblock>
        <argument line="136">
          <name>$section</name>
          <default/>
          <type/>
        </argument>
        <argument line="136">
          <name>$options</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="152" package="Default">
        <name>read</name>
        <argument line="152">
          <name>$filenames</name>
          <default>array</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="184" package="Default">
        <name>get</name>
        <docblock>
          <description>Get an option value for the named section.</description>
          <long-description>&lt;p&gt;If the option doesn't exist in the configuration $defaults is used.
If $defaults doesn't have this option too then we look for the
$fallback parameter.
If everything fails throw a NoOptionException.&lt;/p&gt;
</long-description>
          <tag name="param" description="Section name" type="\NoiseLabs\ToolKit\ConfigParser\$section" variable="$section" line="168">
            <type by_reference="false">\NoiseLabs\ToolKit\ConfigParser\$section</type>
          </tag>
          <tag name="param" description="Option name" type="\NoiseLabs\ToolKit\ConfigParser\$option" variable="$option" line="168">
            <type by_reference="false">\NoiseLabs\ToolKit\ConfigParser\$option</type>
          </tag>
          <tag name="param" description="A fallback value to use if the option isn't found in the configuration and $defaults." type="\NoiseLabs\ToolKit\ConfigParser\$fallback" variable="$fallback" line="168">
            <type by_reference="false">\NoiseLabs\ToolKit\ConfigParser\$fallback</type>
          </tag>
          <tag name="return" description="value (if available)" type="\NoiseLabs\ToolKit\ConfigParser\Option" line="168">
            <type by_reference="false">\NoiseLabs\ToolKit\ConfigParser\Option</type>
          </tag>
          <tag name="throws" description="Couldn't find the desired option in the configuration, $defaults or as a fallback value." type="\NoiseLabs\ToolKit\ConfigParser\Exception\NoOptionException" line="168">
            <type by_reference="false">\NoiseLabs\ToolKit\ConfigParser\Exception\NoOptionException</type>
          </tag>
        </docblock>
        <argument line="184">
          <name>$section</name>
          <default/>
          <type/>
        </argument>
        <argument line="184">
          <name>$option</name>
          <default/>
          <type/>
        </argument>
        <argument line="184">
          <name>$fallback</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="212" package="Default">
        <name>getInt</name>
        <docblock>
          <description>A convenience method which coerces the option in the specified section
to an integer.</description>
          <long-description>
</long-description>
        </docblock>
        <argument line="212">
          <name>$section</name>
          <default/>
          <type/>
        </argument>
        <argument line="212">
          <name>$option</name>
          <default/>
          <type/>
        </argument>
        <argument line="212">
          <name>$fallback</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="221" package="Default">
        <name>getFloat</name>
        <docblock>
          <description>A convenience method which coerces the option in the specified section
to a floating point number.</description>
          <long-description>
</long-description>
        </docblock>
        <argument line="221">
          <name>$section</name>
          <default/>
          <type/>
        </argument>
        <argument line="221">
          <name>$option</name>
          <default/>
          <type/>
        </argument>
        <argument line="221">
          <name>$fallback</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="234" package="Default">
        <name>getBoolean</name>
        <docblock>
          <description>A convenience method which coerces the option in the specified section
to a Boolean value. Note that the accepted values for the option are
'1', 'yes', 'true', and 'on', which cause this method to return TRUE,
and '0', 'no', 'false', and 'off', which cause it to return FALSE.</description>
          <long-description>&lt;p&gt;These string values are checked in a case-insensitive manner. Any
other value will cause it to raise ValueException.&lt;/p&gt;
</long-description>
        </docblock>
        <argument line="234">
          <name>$section</name>
          <default/>
          <type/>
        </argument>
        <argument line="234">
          <name>$option</name>
          <default/>
          <type/>
        </argument>
        <argument line="234">
          <name>$fallback</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="261" package="Default">
        <name>set</name>
        <docblock>
          <description>If the given section exists, set the given option to the specified
value; otherwise raise NoSectionException.</description>
          <long-description>
</long-description>
          <tag name="todo" description="Option and value must be strings; if not, TypeException is raised." line="255"/>
        </docblock>
        <argument line="261">
          <name>$section</name>
          <default/>
          <type/>
        </argument>
        <argument line="261">
          <name>$option</name>
          <default/>
          <type/>
        </argument>
        <argument line="261">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="279" package="Default">
        <name>_buildOptionValueLine</name>
        <argument line="279">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="279">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="300" package="Default">
        <name>_buildOutputString</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="340" package="Default">
        <name>removeOption</name>
        <docblock>
          <description>Remove the specified option from the specified section. If the section
does not exist, raise NoSectionException. If the option existed to be
removed, return TRUE; otherwise return FALSE.</description>
          <long-description>
</long-description>
        </docblock>
        <argument line="340">
          <name>$section</name>
          <default/>
          <type/>
        </argument>
        <argument line="340">
          <name>$option</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="NoiseLabs/ToolKit/ConfigParser/Exception/NoSectionException.php" hash="d90ea822cba24ede2e31fc6c730fa5e1" package="ConfigParser">
    <docblock>
      <description>This file is part of NoiseLabs-PHP-ToolKit</description>
      <long-description>&lt;p&gt;NoiseLabs-PHP-ToolKit is free software; you can redistribute it
and/or modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.&lt;/p&gt;

&lt;p&gt;NoiseLabs-PHP-ToolKit is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.&lt;/p&gt;

&lt;p&gt;You should have received a copy of the GNU Lesser General Public
License along with NoiseLabs-PHP-ToolKit; if not, see
&lt;a href="http://www.gnu.org/licenses/"&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Copyright (C) 2011 V&#xED;tor Brand&#xE3;o &lt;a href="&amp;#109;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#116;&amp;#x6f;&amp;#58;&amp;#x6e;&amp;#111;&amp;#x69;&amp;#115;&amp;#x65;&amp;#98;&amp;#x6c;&amp;#101;&amp;#x65;&amp;#100;&amp;#x40;&amp;#110;&amp;#x6f;&amp;#105;&amp;#x73;&amp;#101;&amp;#x6c;&amp;#97;&amp;#x62;&amp;#115;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;&amp;#x6e;&amp;#111;&amp;#x69;&amp;#115;&amp;#x65;&amp;#98;&amp;#x6c;&amp;#101;&amp;#x65;&amp;#100;&amp;#x40;&amp;#110;&amp;#x6f;&amp;#105;&amp;#x73;&amp;#101;&amp;#x6c;&amp;#97;&amp;#x62;&amp;#115;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;
</long-description>
      <tag name="category" description="NoiseLabs"/>
      <tag name="package" description="ConfigParser"/>
      <tag name="version" description="version" plugin="doctrine" link="http://www.doctrine-project.org/docs/orm/2.1/en/reference/annotations-reference.html#annref-version" content=".1.">
        <argument field-name="">.1.</argument>
      </tag>
      <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="copyright" description="(C) 2011 V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
    </docblock>
    <parse_markers>
      <error line="31">No DocBlock was found for Class NoSectionException</error>
      <error line="33">No DocBlock was found for Method __construct</error>
    </parse_markers>
    <class final="false" abstract="false" line="31" namespace="NoiseLabs\ToolKit\ConfigParser\Exception" package="Default">
      <name>NoSectionException</name>
      <extends>\RuntimeException</extends>
      <full_name>\NoiseLabs\ToolKit\ConfigParser\Exception\NoSectionException</full_name>
      <method final="false" abstract="false" static="false" visibility="public" line="33" package="Default">
        <name>__construct</name>
        <argument line="33">
          <name>$section</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="NoiseLabs/ToolKit/ConfigParser/Exception/NoOptionException.php" hash="6eb9df579d2157ae0ea3ef47f7447518" package="ConfigParser">
    <docblock>
      <description>This file is part of NoiseLabs-PHP-ToolKit</description>
      <long-description>&lt;p&gt;NoiseLabs-PHP-ToolKit is free software; you can redistribute it
and/or modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.&lt;/p&gt;

&lt;p&gt;NoiseLabs-PHP-ToolKit is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.&lt;/p&gt;

&lt;p&gt;You should have received a copy of the GNU Lesser General Public
License along with NoiseLabs-PHP-ToolKit; if not, see
&lt;a href="http://www.gnu.org/licenses/"&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Copyright (C) 2011 V&#xED;tor Brand&#xE3;o &lt;a href="&amp;#109;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#116;&amp;#x6f;&amp;#58;&amp;#x6e;&amp;#111;&amp;#x69;&amp;#115;&amp;#x65;&amp;#98;&amp;#x6c;&amp;#101;&amp;#x65;&amp;#100;&amp;#x40;&amp;#110;&amp;#x6f;&amp;#105;&amp;#x73;&amp;#101;&amp;#x6c;&amp;#97;&amp;#x62;&amp;#115;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;&amp;#x6e;&amp;#111;&amp;#x69;&amp;#115;&amp;#x65;&amp;#98;&amp;#x6c;&amp;#101;&amp;#x65;&amp;#100;&amp;#x40;&amp;#110;&amp;#x6f;&amp;#105;&amp;#x73;&amp;#101;&amp;#x6c;&amp;#97;&amp;#x62;&amp;#115;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;
</long-description>
      <tag name="category" description="NoiseLabs"/>
      <tag name="package" description="ConfigParser"/>
      <tag name="version" description="version" plugin="doctrine" link="http://www.doctrine-project.org/docs/orm/2.1/en/reference/annotations-reference.html#annref-version" content=".1.">
        <argument field-name="">.1.</argument>
      </tag>
      <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="copyright" description="(C) 2011 V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
    </docblock>
    <parse_markers>
      <error line="31">No DocBlock was found for Class NoOptionException</error>
      <error line="33">No DocBlock was found for Method __construct</error>
    </parse_markers>
    <class final="false" abstract="false" line="31" namespace="NoiseLabs\ToolKit\ConfigParser\Exception" package="Default">
      <name>NoOptionException</name>
      <extends>\RuntimeException</extends>
      <full_name>\NoiseLabs\ToolKit\ConfigParser\Exception\NoOptionException</full_name>
      <method final="false" abstract="false" static="false" visibility="public" line="33" package="Default">
        <name>__construct</name>
        <argument line="33">
          <name>$section</name>
          <default/>
          <type/>
        </argument>
        <argument line="33">
          <name>$option</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="NoiseLabs/ToolKit/ConfigParser/Exception/DuplicateSectionException.php" hash="c04703fcf84f0085bd8a03c52f95f151" package="ConfigParser">
    <docblock>
      <description>This file is part of NoiseLabs-PHP-ToolKit</description>
      <long-description>&lt;p&gt;NoiseLabs-PHP-ToolKit is free software; you can redistribute it
and/or modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.&lt;/p&gt;

&lt;p&gt;NoiseLabs-PHP-ToolKit is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.&lt;/p&gt;

&lt;p&gt;You should have received a copy of the GNU Lesser General Public
License along with NoiseLabs-PHP-ToolKit; if not, see
&lt;a href="http://www.gnu.org/licenses/"&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Copyright (C) 2011 V&#xED;tor Brand&#xE3;o &lt;a href="&amp;#109;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#116;&amp;#x6f;&amp;#58;&amp;#x6e;&amp;#111;&amp;#x69;&amp;#115;&amp;#x65;&amp;#98;&amp;#x6c;&amp;#101;&amp;#x65;&amp;#100;&amp;#x40;&amp;#110;&amp;#x6f;&amp;#105;&amp;#x73;&amp;#101;&amp;#x6c;&amp;#97;&amp;#x62;&amp;#115;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;&amp;#x6e;&amp;#111;&amp;#x69;&amp;#115;&amp;#x65;&amp;#98;&amp;#x6c;&amp;#101;&amp;#x65;&amp;#100;&amp;#x40;&amp;#110;&amp;#x6f;&amp;#105;&amp;#x73;&amp;#101;&amp;#x6c;&amp;#97;&amp;#x62;&amp;#115;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;
</long-description>
      <tag name="category" description="NoiseLabs"/>
      <tag name="package" description="ConfigParser"/>
      <tag name="version" description="version" plugin="doctrine" link="http://www.doctrine-project.org/docs/orm/2.1/en/reference/annotations-reference.html#annref-version" content=".1.">
        <argument field-name="">.1.</argument>
      </tag>
      <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="copyright" description="(C) 2011 V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
    </docblock>
    <parse_markers>
      <error line="31">No DocBlock was found for Class DuplicateSectionException</error>
      <error line="33">No DocBlock was found for Method __construct</error>
    </parse_markers>
    <class final="false" abstract="false" line="31" namespace="NoiseLabs\ToolKit\ConfigParser\Exception" package="Default">
      <name>DuplicateSectionException</name>
      <extends>\RuntimeException</extends>
      <full_name>\NoiseLabs\ToolKit\ConfigParser\Exception\DuplicateSectionException</full_name>
      <method final="false" abstract="false" static="false" visibility="public" line="33" package="Default">
        <name>__construct</name>
        <argument line="33">
          <name>$section</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="NoiseLabs/ToolKit/ConfigParser/ParameterBag.php" hash="3254a338c5b9efe5f70fccad7a64ba44" package="Default">
    <parse_markers>
      <error line="3">No Page-level DocBlock was found</error>
      <error line="40">No DocBlock was found for Property $parameters</error>
    </parse_markers>
    <class final="false" abstract="false" line="38" namespace="NoiseLabs\ToolKit\ConfigParser" package="Default">
      <name>ParameterBag</name>
      <extends/>
      <full_name>\NoiseLabs\ToolKit\ConfigParser\ParameterBag</full_name>
      <docblock>
        <description>ParameterBag is a container for key/value pairs.</description>
        <long-description>
</long-description>
        <tag name="author" description="Fabien Potencier &lt;fabien@symfony.com&gt;" line="33"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="40" package="Default">
        <name>$parameters</name>
        <default/>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="47" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor.</description>
          <long-description>
</long-description>
          <tag name="param" description="An array of parameters" type="array" variable="$parameters" line="42">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="47">
          <name>$parameters</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="57" package="Default">
        <name>all</name>
        <docblock>
          <description>Returns the parameters.</description>
          <long-description>
</long-description>
          <tag name="return" description="An array of parameters" type="array" line="52">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="67" package="Default">
        <name>keys</name>
        <docblock>
          <description>Returns the parameter keys.</description>
          <long-description>
</long-description>
          <tag name="return" description="An array of parameter keys" type="array" line="62">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="77" package="Default">
        <name>replace</name>
        <docblock>
          <description>Replaces the current parameters by a new set.</description>
          <long-description>
</long-description>
          <tag name="param" description="An array of parameters" type="array" variable="$parameters" line="72">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="77">
          <name>$parameters</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="87" package="Default">
        <name>add</name>
        <docblock>
          <description>Adds parameters.</description>
          <long-description>
</long-description>
          <tag name="param" description="An array of parameters" type="array" variable="$parameters" line="82">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="87">
          <name>$parameters</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="99" package="Default">
        <name>get</name>
        <docblock>
          <description>Returns a parameter by name.</description>
          <long-description>
</long-description>
          <tag name="param" description="The key" type="string" variable="$path" line="92">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The default value" type="mixed" variable="$default" line="92">
            <type by_reference="false">mixed</type>
          </tag>
          <tag name="param" description="" type="boolean" variable="$deep" line="92">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="99">
          <name>$path</name>
          <default/>
          <type/>
        </argument>
        <argument line="99">
          <name>$default</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="99">
          <name>$deep</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="154" package="Default">
        <name>set</name>
        <docblock>
          <description>Sets a parameter by name.</description>
          <long-description>
</long-description>
          <tag name="param" description="The key" type="string" variable="$key" line="148">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The value" type="mixed" variable="$value" line="148">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="154">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="154">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="166" package="Default">
        <name>has</name>
        <docblock>
          <description>Returns true if the parameter is defined.</description>
          <long-description>
</long-description>
          <tag name="param" description="The key" type="string" variable="$key" line="159">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="true if the parameter exists, false otherwise" type="Boolean" line="159">
            <type by_reference="false">Boolean</type>
          </tag>
        </docblock>
        <argument line="166">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="176" package="Default">
        <name>remove</name>
        <docblock>
          <description>Removes a parameter.</description>
          <long-description>
</long-description>
          <tag name="param" description="The key" type="string" variable="$key" line="171">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="176">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="190" package="Default">
        <name>getAlpha</name>
        <docblock>
          <description>Returns the alphabetic characters of the parameter value.</description>
          <long-description>
</long-description>
          <tag name="param" description="The parameter key" type="string" variable="$key" line="181">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The default value" type="mixed" variable="$default" line="181">
            <type by_reference="false">mixed</type>
          </tag>
          <tag name="param" description="" type="boolean" variable="$deep" line="181">
            <type by_reference="false">boolean</type>
          </tag>
          <tag name="return" description="The filtered value" type="string" line="181">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="190">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="190">
          <name>$default</name>
          <default/>
          <type/>
        </argument>
        <argument line="190">
          <name>$deep</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="204" package="Default">
        <name>getAlnum</name>
        <docblock>
          <description>Returns the alphabetic characters and digits of the parameter value.</description>
          <long-description>
</long-description>
          <tag name="param" description="The parameter key" type="string" variable="$key" line="195">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The default value" type="mixed" variable="$default" line="195">
            <type by_reference="false">mixed</type>
          </tag>
          <tag name="param" description="" type="boolean" variable="$deep" line="195">
            <type by_reference="false">boolean</type>
          </tag>
          <tag name="return" description="The filtered value" type="string" line="195">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="204">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="204">
          <name>$default</name>
          <default/>
          <type/>
        </argument>
        <argument line="204">
          <name>$deep</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="218" package="Default">
        <name>getDigits</name>
        <docblock>
          <description>Returns the digits of the parameter value.</description>
          <long-description>
</long-description>
          <tag name="param" description="The parameter key" type="string" variable="$key" line="209">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The default value" type="mixed" variable="$default" line="209">
            <type by_reference="false">mixed</type>
          </tag>
          <tag name="param" description="" type="boolean" variable="$deep" line="209">
            <type by_reference="false">boolean</type>
          </tag>
          <tag name="return" description="The filtered value" type="string" line="209">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="218">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="218">
          <name>$default</name>
          <default/>
          <type/>
        </argument>
        <argument line="218">
          <name>$deep</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="232" package="Default">
        <name>getInt</name>
        <docblock>
          <description>Returns the parameter value converted to integer.</description>
          <long-description>
</long-description>
          <tag name="param" description="The parameter key" type="string" variable="$key" line="223">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The default value" type="mixed" variable="$default" line="223">
            <type by_reference="false">mixed</type>
          </tag>
          <tag name="param" description="" type="boolean" variable="$deep" line="223">
            <type by_reference="false">boolean</type>
          </tag>
          <tag name="return" description="The filtered value" type="string" line="223">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="232">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="232">
          <name>$default</name>
          <default>0</default>
          <type/>
        </argument>
        <argument line="232">
          <name>$deep</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="NoiseLabs/ToolKit/ConfigParser/BaseConfigParser.php" hash="d1859fc18fc20af2fbff561dd4fe3629" package="ConfigParser">
    <docblock>
      <description>This file is part of NoiseLabs-PHP-ToolKit</description>
      <long-description>&lt;p&gt;NoiseLabs-PHP-ToolKit is free software; you can redistribute it
and/or modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.&lt;/p&gt;

&lt;p&gt;NoiseLabs-PHP-ToolKit is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.&lt;/p&gt;

&lt;p&gt;You should have received a copy of the GNU Lesser General Public
License along with NoiseLabs-PHP-ToolKit; if not, see
&lt;a href="http://www.gnu.org/licenses/"&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Copyright (C) 2011 V&#xED;tor Brand&#xE3;o &lt;a href="&amp;#109;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#116;&amp;#x6f;&amp;#58;&amp;#x6e;&amp;#111;&amp;#x69;&amp;#115;&amp;#x65;&amp;#98;&amp;#x6c;&amp;#101;&amp;#x65;&amp;#100;&amp;#x40;&amp;#110;&amp;#x6f;&amp;#105;&amp;#x73;&amp;#101;&amp;#x6c;&amp;#97;&amp;#x62;&amp;#115;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;&amp;#x6e;&amp;#111;&amp;#x69;&amp;#115;&amp;#x65;&amp;#98;&amp;#x6c;&amp;#101;&amp;#x65;&amp;#100;&amp;#x40;&amp;#110;&amp;#x6f;&amp;#105;&amp;#x73;&amp;#101;&amp;#x6c;&amp;#97;&amp;#x62;&amp;#115;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;
</long-description>
      <tag name="category" description="NoiseLabs"/>
      <tag name="package" description="ConfigParser"/>
      <tag name="version" description="version" plugin="doctrine" link="http://www.doctrine-project.org/docs/orm/2.1/en/reference/annotations-reference.html#annref-version" content=".2.0-BETA">
        <argument field-name="">.2.0-BETA</argument>
      </tag>
      <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="copyright" description="(C) 2011 V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
    </docblock>
    <parse_markers>
      <error line="33">No DocBlock was found for Class BaseConfigParser</error>
      <error line="35">No DocBlock was found for Constant VERSION</error>
      <notice line="152">Argument $filename is missing from the function Docblock</notice>
      <notice line="185">Argument $filenames is missing from the function Docblock</notice>
      <error line="204">No DocBlock was found for Method readFile</error>
      <error line="209">No DocBlock was found for Method readString</error>
      <error line="214">No DocBlock was found for Method readArray</error>
      <error line="233">No DocBlock was found for Method _buildOutputString</error>
      <notice line="240">Argument $filename is missing from the function Docblock</notice>
      <notice line="336">Argument $section is missing from the function Docblock</notice>
      <notice line="380">Name of argument $offset does not match with function Docblock</notice>
      <notice line="380">Name of argument $value does not match with function Docblock</notice>
      <error line="396">No DocBlock was found for Method log</error>
      <error line="401">No DocBlock was found for Method _throwExceptions</error>
    </parse_markers>
    <namespace-alias name="ParameterBag">NoiseLabs\ToolKit\ConfigParser\ParameterBag</namespace-alias>
    <class final="false" abstract="true" line="33" namespace="NoiseLabs\ToolKit\ConfigParser" package="Default">
      <name>BaseConfigParser</name>
      <extends/>
      <full_name>\NoiseLabs\ToolKit\ConfigParser\BaseConfigParser</full_name>
      <implements>\ArrayAccess</implements>
      <implements>\IteratorAggregate</implements>
      <implements>\Countable</implements>
      <constant namespace="NoiseLabs\ToolKit\ConfigParser" line="35" package="Default">
        <name>VERSION</name>
        <value>0.2.0-BETA2</value>
      </constant>
      <property final="false" static="false" visibility="public" line="58" package="Default">
        <name>$settings</name>
        <default>array</default>
        <docblock>
          <description>A set of internal options used when parsing and writing files.</description>
          <long-description>&lt;p&gt;Known settings:&lt;/p&gt;

&lt;p&gt;'delimiter':
        The delimiter character to use between keys and values.
        Defaults to '='.&lt;/p&gt;

&lt;p&gt;'space_around_delimiters':
        Put a blank space between keys/values and delimiters?
        Defaults to TRUE.&lt;/p&gt;

&lt;p&gt;'linebreak':
        The linebreak to use.
        Defaults to '\r\n' on Windows OS and '\n' on every other OS.&lt;/p&gt;

&lt;p&gt;'interpolation':&lt;/p&gt;
</long-description>
          <tag name="todo" description=": Describe the interpolation mecanism.&#10;Defaults to FALSE." line="37"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="64" package="Default">
        <name>$_defaults</name>
        <default>array</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="var" description="" type="array" line="60">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="70" package="Default">
        <name>$_sections</name>
        <default>array</default>
        <docblock>
          <description>The configuration representation is stored here.</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="array" line="66">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="78" package="Default">
        <name>$_comments</name>
        <default/>
        <docblock>
          <description>Comment lines are stored here so they can make it to the destination
file.</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="array" line="72">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="84" package="Default">
        <name>$_files</name>
        <default>array</default>
        <docblock>
          <description>An array of FILE objects representing the loaded files.</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="array" line="80">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="90" package="Default">
        <name>$_boolean_states</name>
        <default>array</default>
        <docblock>
          <description>Booleans alias</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="array" line="86">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="107" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor.</description>
          <long-description>
</long-description>
          <tag name="param" description="" type="array" variable="$defaults" line="101">
            <type by_reference="false">array</type>
          </tag>
          <tag name="param" description="" type="array" variable="$settings" line="101">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="107">
          <name>$defaults</name>
          <default>array</default>
          <type>array</type>
        </argument>
        <argument line="107">
          <name>$settings</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="126" package="Default">
        <name>defaults</name>
        <docblock>
          <description>Return an associative array containing the instance-wide defaults.</description>
          <long-description>
</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="137" package="Default">
        <name>readComments</name>
        <docblock>
          <description>Saves all comments into an internal variable to be used when writing the
configuration to a file.</description>
          <long-description>
</long-description>
          <tag name="param" description="" type="string" variable="$filename" line="131">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="137">
          <name>$filename</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="152" package="Default">
        <name>_read</name>
        <docblock>
          <description>Note the usage of INI_SCANNER_RAW to avoid parser_ini_files from
parsing options and transforming 'false' values to empty strings.</description>
          <long-description>
</long-description>
        </docblock>
        <argument line="152">
          <name>$filename</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="185" package="Default">
        <name>read</name>
        <docblock>
          <description>Attempt to read and parse a list of filenames, returning a list of
filenames which were successfully parsed. If filenames is a string, it
is treated as a single filename. If a file named in filenames cannot be
opened, that file will be ignored. This is designed so that you can
specify a list of potential configuration file locations (for example,
the current directory, the user&#x2019;s home directory, and some system-wide
directory), and all existing configuration files in the list will be
read. If none of the named files exist, the ConfigParser instance will
contain an empty dataset. An application which requires initial values
to be loaded from a file should load the required file or files using
read_file() before calling read() for any optional files:</description>
          <long-description>
</long-description>
        </docblock>
        <argument line="185">
          <name>$filenames</name>
          <default>array</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="204" package="Default">
        <name>readFile</name>
        <argument line="204">
          <name>$filehandler</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="209" package="Default">
        <name>readString</name>
        <argument line="209">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="214" package="Default">
        <name>readArray</name>
        <argument line="214">
          <name>$array</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="222" package="Default">
        <name>reload</name>
        <docblock>
          <description>Re-read configuration from all successfully parsed files.</description>
          <long-description>
</long-description>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" line="233" package="Default">
        <name>_buildOutputString</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="240" package="Default">
        <name>write</name>
        <docblock>
          <description>Write an .ini-format representation of the configuration state</description>
          <long-description>
</long-description>
          <tag name="throws" description="if file is not writable" type="\NoiseLabs\ToolKit\ConfigParser\RuntimeException" line="235">
            <type by_reference="false">\NoiseLabs\ToolKit\ConfigParser\RuntimeException</type>
          </tag>
        </docblock>
        <argument line="240">
          <name>$filename</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="275" package="Default">
        <name>getIterator</name>
        <docblock>
          <description>Returns the iterator for this group.</description>
          <long-description>
</long-description>
          <tag name="return" description="" type="\ArrayIterator" line="270">
            <type by_reference="false">\ArrayIterator</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="285" package="Default">
        <name>count</name>
        <docblock>
          <description>Returns the number of sections (implements the \Countable interface).</description>
          <long-description>
</long-description>
          <tag name="return" description="The number of sections" type="integer" line="280">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="294" package="Default">
        <name>save</name>
        <docblock>
          <description>Write the stored configuration to the last file successfully parsed
in $this-&gt;read().</description>
          <long-description>
</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="306" package="Default">
        <name>clear</name>
        <docblock>
          <description>Removes all parsed data.</description>
          <long-description>
</long-description>
          <tag name="return" description="" type="void" line="301">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="316" package="Default">
        <name>dump</name>
        <docblock>
          <description>Output the current configuration representation.</description>
          <long-description>
</long-description>
          <tag name="return" description="" type="void" line="311">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="327" package="Default">
        <name>output</name>
        <docblock>
          <description>Prints to the screen the current string as it would be written to the
configuration file.</description>
          <long-description>
</long-description>
          <tag name="return" description="" type="void" line="321">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="336" package="Default">
        <name>removeSection</name>
        <docblock>
          <description>Remove the specified section from the configuration. If the section in
fact existed, return TRUE. Otherwise return FALSE.</description>
          <long-description>
</long-description>
        </docblock>
        <argument line="336">
          <name>$section</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="355" package="Default">
        <name>offsetExists</name>
        <docblock>
          <description>Returns true if the section exists (implements the \ArrayAccess
interface).</description>
          <long-description>
</long-description>
          <tag name="param" description="The name of the section" type="string" variable="$offset" line="347">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="true if the section exists, false otherwise" type="Boolean" line="347">
            <type by_reference="false">Boolean</type>
          </tag>
        </docblock>
        <argument line="355">
          <name>$offset</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="368" package="Default">
        <name>offsetGet</name>
        <docblock>
          <description>Returns the array of options associated with the section (implements
the \ArrayAccess interface).</description>
          <long-description>
</long-description>
          <tag name="param" description="The offset of the value to get" type="string" variable="$offset" line="360">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="The array of options associated with the section" type="mixed" line="360">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="368">
          <name>$offset</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="380" package="Default">
        <name>offsetSet</name>
        <docblock>
          <description>Adds an array of options to the given section (implements the
\ArrayAccess interface).</description>
          <long-description>
</long-description>
          <tag name="param" description="The name of the section to insert $options." type="string" variable="$section" line="373">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The array of options to be added" type="array" variable="$options" line="373">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="380">
          <name>$offset</name>
          <default/>
          <type/>
        </argument>
        <argument line="380">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="391" package="Default">
        <name>offsetUnset</name>
        <docblock>
          <description>Removes the child with the given name from the form (implements the
\ArrayAccess interface).</description>
          <long-description>
</long-description>
          <tag name="param" description="The name of the child to be removed" type="string" variable="$name" line="385">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="391">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="396" package="Default">
        <name>log</name>
        <argument line="396">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="396">
          <name>$level</name>
          <default>crit</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="401" package="Default">
        <name>_throwExceptions</name>
      </method>
    </class>
  </file>
  <file path="NoiseLabs/ToolKit/ConfigParser/NoSectionsConfigParser.php" hash="b4204e508bcdcc3b623df53c28f86095" package="ConfigParser">
    <docblock>
      <description>This file is part of NoiseLabs-PHP-ToolKit</description>
      <long-description>&lt;p&gt;NoiseLabs-PHP-ToolKit is free software; you can redistribute it
and/or modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.&lt;/p&gt;

&lt;p&gt;NoiseLabs-PHP-ToolKit is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.&lt;/p&gt;

&lt;p&gt;You should have received a copy of the GNU Lesser General Public
License along with NoiseLabs-PHP-ToolKit; if not, see
&lt;a href="http://www.gnu.org/licenses/"&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Copyright (C) 2011 V&#xED;tor Brand&#xE3;o &lt;a href="&amp;#109;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#116;&amp;#x6f;&amp;#58;&amp;#x6e;&amp;#111;&amp;#x69;&amp;#115;&amp;#x65;&amp;#98;&amp;#x6c;&amp;#101;&amp;#x65;&amp;#100;&amp;#x40;&amp;#110;&amp;#x6f;&amp;#105;&amp;#x73;&amp;#101;&amp;#x6c;&amp;#97;&amp;#x62;&amp;#115;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;&amp;#x6e;&amp;#111;&amp;#x69;&amp;#115;&amp;#x65;&amp;#98;&amp;#x6c;&amp;#101;&amp;#x65;&amp;#100;&amp;#x40;&amp;#110;&amp;#x6f;&amp;#105;&amp;#x73;&amp;#101;&amp;#x6c;&amp;#97;&amp;#x62;&amp;#115;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;
</long-description>
      <tag name="category" description="NoiseLabs"/>
      <tag name="package" description="ConfigParser"/>
      <tag name="version" description="version" plugin="doctrine" link="http://www.doctrine-project.org/docs/orm/2.1/en/reference/annotations-reference.html#annref-version" content=".1.">
        <argument field-name="">.1.</argument>
      </tag>
      <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="copyright" description="(C) 2011 V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
    </docblock>
    <parse_markers>
      <error line="42">No DocBlock was found for Constant HAS_SECTIONS</error>
      <notice line="55">Argument $option is missing from the function Docblock</notice>
      <notice line="98">Argument $option is missing from the function Docblock</notice>
      <notice line="98">Argument $fallback is missing from the function Docblock</notice>
      <notice line="107">Argument $option is missing from the function Docblock</notice>
      <notice line="107">Argument $fallback is missing from the function Docblock</notice>
      <notice line="120">Argument $option is missing from the function Docblock</notice>
      <notice line="120">Argument $fallback is missing from the function Docblock</notice>
      <error line="141">No DocBlock was found for Method _buildOutputString</error>
    </parse_markers>
    <namespace-alias name="File">NoiseLabs\ToolKit\ConfigParser\File</namespace-alias>
    <namespace-alias name="NoOptionException">NoiseLabs\ToolKit\ConfigParser\Exception\NoOptionException</namespace-alias>
    <class final="false" abstract="false" line="40" namespace="NoiseLabs\ToolKit\ConfigParser" package="Default">
      <name>NoSectionsConfigParser</name>
      <extends>\NoiseLabs\ToolKit\ConfigParser\BaseConfigParser</extends>
      <full_name>\NoiseLabs\ToolKit\ConfigParser\NoSectionsConfigParser</full_name>
      <docblock>
        <description>This class is a version of the ConfigParser class meant to be used for
configuration files that don't have sections.</description>
        <long-description>
</long-description>
        <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;" line="34"/>
      </docblock>
      <implements>\NoiseLabs\ToolKit\ConfigParser\NoSectionsConfigParserInterface</implements>
      <constant namespace="NoiseLabs\ToolKit\ConfigParser" line="42" package="Default">
        <name>HAS_SECTIONS</name>
        <value>false</value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" line="47" package="Default">
        <name>options</name>
        <docblock>
          <description>Return a list of options available</description>
          <long-description>
</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="55" package="Default">
        <name>hasOption</name>
        <docblock>
          <description>If the given option exists, return TRUE; otherwise return FALSE.</description>
          <long-description>
</long-description>
        </docblock>
        <argument line="55">
          <name>$option</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="75" package="Default">
        <name>get</name>
        <docblock>
          <description>Get an option value for the named section.</description>
          <long-description>&lt;p&gt;If the option doesn't exist in the configuration $defaults is used.
If $defaults doesn't have this option too then we look for the
$fallback parameter.
If everything fails throw a NoOptionException.&lt;/p&gt;
</long-description>
          <tag name="param" description="Option name" type="\NoiseLabs\ToolKit\ConfigParser\$option" variable="$option" line="60">
            <type by_reference="false">\NoiseLabs\ToolKit\ConfigParser\$option</type>
          </tag>
          <tag name="param" description="A fallback value to use if the option isn't found in the configuration." type="\NoiseLabs\ToolKit\ConfigParser\$fallback" variable="$fallback" line="60">
            <type by_reference="false">\NoiseLabs\ToolKit\ConfigParser\$fallback</type>
          </tag>
          <tag name="return" description="value (if available)" type="\NoiseLabs\ToolKit\ConfigParser\Option" line="60">
            <type by_reference="false">\NoiseLabs\ToolKit\ConfigParser\Option</type>
          </tag>
          <tag name="throws" description="Couldn't find the desired option in the configuration or as a fallback value." type="\NoiseLabs\ToolKit\ConfigParser\Exception\NoOptionException" line="60">
            <type by_reference="false">\NoiseLabs\ToolKit\ConfigParser\Exception\NoOptionException</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$option</name>
          <default/>
          <type/>
        </argument>
        <argument line="75">
          <name>$fallback</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="98" package="Default">
        <name>getInt</name>
        <docblock>
          <description>A convenience method which coerces the option value to an integer.</description>
          <long-description>
</long-description>
        </docblock>
        <argument line="98">
          <name>$option</name>
          <default/>
          <type/>
        </argument>
        <argument line="98">
          <name>$fallback</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="107" package="Default">
        <name>getFloat</name>
        <docblock>
          <description>A convenience method which coerces the option value to a floating
point number.</description>
          <long-description>
</long-description>
        </docblock>
        <argument line="107">
          <name>$option</name>
          <default/>
          <type/>
        </argument>
        <argument line="107">
          <name>$fallback</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="120" package="Default">
        <name>getBoolean</name>
        <docblock>
          <description>A convenience method which coerces the option value to a Boolean value.</description>
          <long-description>&lt;p&gt;Note that the accepted values for the option are '1', 'yes', 'true',
and 'on', which cause this method to return TRUE, and '0', 'no',
'false', and 'off', which cause it to return FALSE.
These string values are checked in a case-insensitive manner. Any
other value will cause it to raise ValueException.&lt;/p&gt;
</long-description>
        </docblock>
        <argument line="120">
          <name>$option</name>
          <default/>
          <type/>
        </argument>
        <argument line="120">
          <name>$fallback</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="141" package="Default">
        <name>_buildOutputString</name>
      </method>
    </class>
  </file>
  <file path="NoiseLabs/ToolKit/ConfigParser/ConfigParserInterface.php" hash="219572dca51b0768f6369ea951e2bc00" package="ConfigParser">
    <docblock>
      <description>This file is part of NoiseLabs-PHP-ToolKit</description>
      <long-description>&lt;p&gt;NoiseLabs-PHP-ToolKit is free software; you can redistribute it
and/or modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.&lt;/p&gt;

&lt;p&gt;NoiseLabs-PHP-ToolKit is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.&lt;/p&gt;

&lt;p&gt;You should have received a copy of the GNU Lesser General Public
License along with NoiseLabs-PHP-ToolKit; if not, see
&lt;a href="http://www.gnu.org/licenses/"&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Copyright (C) 2011 V&#xED;tor Brand&#xE3;o &lt;a href="&amp;#109;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#116;&amp;#x6f;&amp;#58;&amp;#x6e;&amp;#111;&amp;#x69;&amp;#115;&amp;#x65;&amp;#98;&amp;#x6c;&amp;#101;&amp;#x65;&amp;#100;&amp;#x40;&amp;#110;&amp;#x6f;&amp;#105;&amp;#x73;&amp;#101;&amp;#x6c;&amp;#97;&amp;#x62;&amp;#115;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;&amp;#x6e;&amp;#111;&amp;#x69;&amp;#115;&amp;#x65;&amp;#98;&amp;#x6c;&amp;#101;&amp;#x65;&amp;#100;&amp;#x40;&amp;#110;&amp;#x6f;&amp;#105;&amp;#x73;&amp;#101;&amp;#x6c;&amp;#97;&amp;#x62;&amp;#115;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;
</long-description>
      <tag name="category" description="NoiseLabs"/>
      <tag name="package" description="ConfigParser"/>
      <tag name="version" description="version" plugin="doctrine" link="http://www.doctrine-project.org/docs/orm/2.1/en/reference/annotations-reference.html#annref-version" content=".1.">
        <argument field-name="">.1.</argument>
      </tag>
      <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="copyright" description="(C) 2011 V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
    </docblock>
    <parse_markers>
      <error line="36">No DocBlock was found for Method defaults</error>
      <error line="38">No DocBlock was found for Method sections</error>
      <error line="40">No DocBlock was found for Method addSection</error>
      <error line="42">No DocBlock was found for Method hasSection</error>
      <error line="44">No DocBlock was found for Method options</error>
      <error line="46">No DocBlock was found for Method hasOption</error>
      <error line="48">No DocBlock was found for Method read</error>
      <error line="50">No DocBlock was found for Method readFile</error>
      <error line="52">No DocBlock was found for Method readString</error>
      <error line="54">No DocBlock was found for Method readArray</error>
      <error line="56">No DocBlock was found for Method get</error>
      <error line="58">No DocBlock was found for Method getInt</error>
      <error line="60">No DocBlock was found for Method getFloat</error>
      <error line="62">No DocBlock was found for Method getBoolean</error>
      <error line="64">No DocBlock was found for Method set</error>
      <error line="66">No DocBlock was found for Method write</error>
      <error line="68">No DocBlock was found for Method save</error>
      <error line="70">No DocBlock was found for Method removeOption</error>
      <error line="72">No DocBlock was found for Method removeSection</error>
      <error line="74">No DocBlock was found for Method dump</error>
    </parse_markers>
    <interface namespace="NoiseLabs\ToolKit\ConfigParser" line="34" package="Default">
      <name>ConfigParserInterface</name>
      <extends/>
      <full_name>\NoiseLabs\ToolKit\ConfigParser\ConfigParserInterface</full_name>
      <docblock>
        <description>The Interface for the ConfigParser class.</description>
        <long-description>
</long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" line="36" package="Default">
        <name>defaults</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="38" package="Default">
        <name>sections</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="40" package="Default">
        <name>addSection</name>
        <argument line="40">
          <name>$section</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="42" package="Default">
        <name>hasSection</name>
        <argument line="42">
          <name>$section</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="44" package="Default">
        <name>options</name>
        <argument line="44">
          <name>$section</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="46" package="Default">
        <name>hasOption</name>
        <argument line="46">
          <name>$section</name>
          <default/>
          <type/>
        </argument>
        <argument line="46">
          <name>$option</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="48" package="Default">
        <name>read</name>
        <argument line="48">
          <name>$filenames</name>
          <default>array</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="50" package="Default">
        <name>readFile</name>
        <argument line="50">
          <name>$filehandler</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="52" package="Default">
        <name>readString</name>
        <argument line="52">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="54" package="Default">
        <name>readArray</name>
        <argument line="54">
          <name>$array</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="56" package="Default">
        <name>get</name>
        <argument line="56">
          <name>$section</name>
          <default/>
          <type/>
        </argument>
        <argument line="56">
          <name>$option</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="58" package="Default">
        <name>getInt</name>
        <argument line="58">
          <name>$section</name>
          <default/>
          <type/>
        </argument>
        <argument line="58">
          <name>$option</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="60" package="Default">
        <name>getFloat</name>
        <argument line="60">
          <name>$section</name>
          <default/>
          <type/>
        </argument>
        <argument line="60">
          <name>$option</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="62" package="Default">
        <name>getBoolean</name>
        <argument line="62">
          <name>$section</name>
          <default/>
          <type/>
        </argument>
        <argument line="62">
          <name>$option</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="64" package="Default">
        <name>set</name>
        <argument line="64">
          <name>$section</name>
          <default/>
          <type/>
        </argument>
        <argument line="64">
          <name>$option</name>
          <default/>
          <type/>
        </argument>
        <argument line="64">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="66" package="Default">
        <name>write</name>
        <argument line="66">
          <name>$filename</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="68" package="Default">
        <name>save</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="70" package="Default">
        <name>removeOption</name>
        <argument line="70">
          <name>$section</name>
          <default/>
          <type/>
        </argument>
        <argument line="70">
          <name>$option</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="72" package="Default">
        <name>removeSection</name>
        <argument line="72">
          <name>$section</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="74" package="Default">
        <name>dump</name>
      </method>
    </interface>
  </file>
  <file path="NoiseLabs/ToolKit/ConfigParser/File.php" hash="6200305950a93f77035681b1926fd1a9" package="ConfigParser">
    <docblock>
      <description>This file is part of NoiseLabs-PHP-ToolKit</description>
      <long-description>&lt;p&gt;NoiseLabs-PHP-ToolKit is free software; you can redistribute it
and/or modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.&lt;/p&gt;

&lt;p&gt;NoiseLabs-PHP-ToolKit is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.&lt;/p&gt;

&lt;p&gt;You should have received a copy of the GNU Lesser General Public
License along with NoiseLabs-PHP-ToolKit; if not, see
&lt;a href="http://www.gnu.org/licenses/"&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Copyright (C) 2011 V&#xED;tor Brand&#xE3;o &lt;a href="&amp;#109;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#116;&amp;#x6f;&amp;#58;&amp;#x6e;&amp;#111;&amp;#x69;&amp;#115;&amp;#x65;&amp;#98;&amp;#x6c;&amp;#101;&amp;#x65;&amp;#100;&amp;#x40;&amp;#110;&amp;#x6f;&amp;#105;&amp;#x73;&amp;#101;&amp;#x6c;&amp;#97;&amp;#x62;&amp;#115;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;&amp;#x6e;&amp;#111;&amp;#x69;&amp;#115;&amp;#x65;&amp;#98;&amp;#x6c;&amp;#101;&amp;#x65;&amp;#100;&amp;#x40;&amp;#110;&amp;#x6f;&amp;#105;&amp;#x73;&amp;#101;&amp;#x6c;&amp;#97;&amp;#x62;&amp;#115;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;
</long-description>
      <tag name="category" description="NoiseLabs"/>
      <tag name="package" description="ConfigParser"/>
      <tag name="version" description="version" plugin="doctrine" link="http://www.doctrine-project.org/docs/orm/2.1/en/reference/annotations-reference.html#annref-version" content=".1.">
        <argument field-name="">.1.</argument>
      </tag>
      <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="copyright" description="(C) 2011 V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
    </docblock>
    <parse_markers>
      <error line="31">No DocBlock was found for Class File</error>
      <error line="89">No DocBlock was found for Method __construct</error>
      <error line="95">No DocBlock was found for Method getPathname</error>
      <error line="100">No DocBlock was found for Method open</error>
      <error line="111">No DocBlock was found for Method write</error>
      <error line="116">No DocBlock was found for Method close</error>
      <error line="121">No DocBlock was found for Method isReadable</error>
      <error line="126">No DocBlock was found for Method isWritable</error>
      <error line="131">No DocBlock was found for Method remove</error>
    </parse_markers>
    <class final="false" abstract="false" line="31" namespace="NoiseLabs\ToolKit\ConfigParser" package="Default">
      <name>File</name>
      <extends/>
      <full_name>\NoiseLabs\ToolKit\ConfigParser\File</full_name>
      <property final="false" static="false" visibility="protected" line="36" package="Default">
        <name>$_path</name>
        <default/>
        <docblock>
          <description>Pathname</description>
          <long-description>
</long-description>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="41" package="Default">
        <name>$_handle</name>
        <default/>
        <docblock>
          <description>File pointer to the given filename.</description>
          <long-description>
</long-description>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="87" package="Default">
        <name>$_mode</name>
        <default/>
        <docblock>
          <description>A list of possible modes for fopen():</description>
          <long-description>&lt;p&gt;'r': Open for reading only; place the file pointer at the beginning of
the file.&lt;/p&gt;

&lt;p&gt;'r+': Open for reading and writing; place the file pointer at the
beginning of the file.&lt;/p&gt;

&lt;p&gt;'w': Open for writing only; place the file pointer at the beginning of
the file and truncate the file to zero length. If the file does not
exist, attempt to create it.&lt;/p&gt;

&lt;p&gt;'w+': Open for reading and writing; place the file pointer at the
beginning of the file and truncate the file to zero length. If the file
does not exist, attempt to create it.&lt;/p&gt;

&lt;p&gt;'a': Open for writing only; place the file pointer at the end of the
file. If the file does not exist, attempt to create it.&lt;/p&gt;

&lt;p&gt;'a+': Open for reading and writing; place the file pointer at the end
of the file. If the file does not exist, attempt to create it.&lt;/p&gt;

&lt;p&gt;'x': Create and open for writing only; place the file pointer at the
beginning of the file. If the file already exists, the fopen() call will
fail by returning FALSE and generating an error of level E_WARNING. If
the file does not exist, attempt to create it. This is equivalent to
specifying O_EXCL|O_CREAT flags for the underlying open(2) system call.&lt;/p&gt;

&lt;p&gt;'x+': Create and open for reading and writing; otherwise it has the
same behavior as 'x'.&lt;/p&gt;

&lt;p&gt;'c': Open the file for writing only. If the file does not exist, it is
created. If it exists, it is neither truncated (as opposed to 'w'), nor
the call to this function fails (as is the case with 'x'). The file
pointer is positioned on the beginning of the file. This may be useful
if it's desired to get an advisory lock (see flock()) before attempting
to modify the file, as using 'w' could truncate the file before the
lock was obtained (if truncation is desired, ftruncate() can be used
after the lock is requested).&lt;/p&gt;

&lt;p&gt;'c+': Open the file for reading and writing; otherwise it has the
same behavior as 'c'.&lt;/p&gt;
</long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="89" package="Default">
        <name>__construct</name>
        <argument line="89">
          <name>$filename</name>
          <default/>
          <type/>
        </argument>
        <argument line="89">
          <name>$mode</name>
          <default>rb</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="95" package="Default">
        <name>getPathname</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="100" package="Default">
        <name>open</name>
        <argument line="100">
          <name>$mode</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="111" package="Default">
        <name>write</name>
        <argument line="111">
          <name>$content</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="116" package="Default">
        <name>close</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="121" package="Default">
        <name>isReadable</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="126" package="Default">
        <name>isWritable</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="131" package="Default">
        <name>remove</name>
      </method>
    </class>
  </file>
  <file path="NoiseLabs/ToolKit/Helper.php" hash="2e619c79f8794b2c9e2c5c85cc38084a" package="ToolKit">
    <docblock>
      <description>This file is part of NoiseLabs-PHP-ToolKit</description>
      <long-description>&lt;p&gt;NoiseLabs-PHP-ToolKit is free software; you can redistribute it
and/or modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.&lt;/p&gt;

&lt;p&gt;NoiseLabs-PHP-ToolKit is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.&lt;/p&gt;

&lt;p&gt;You should have received a copy of the GNU Lesser General Public
License along with NoiseLabs-PHP-ToolKit; if not, see
&lt;a href="http://www.gnu.org/licenses/"&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Copyright (C) 2011 V&#xED;tor Brand&#xE3;o &lt;a href="&amp;#109;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#116;&amp;#x6f;&amp;#58;&amp;#x6e;&amp;#111;&amp;#x69;&amp;#115;&amp;#x65;&amp;#98;&amp;#x6c;&amp;#101;&amp;#x65;&amp;#100;&amp;#x40;&amp;#110;&amp;#x6f;&amp;#105;&amp;#x73;&amp;#101;&amp;#x6c;&amp;#97;&amp;#x62;&amp;#115;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;&amp;#x6e;&amp;#111;&amp;#x69;&amp;#115;&amp;#x65;&amp;#98;&amp;#x6c;&amp;#101;&amp;#x65;&amp;#100;&amp;#x40;&amp;#110;&amp;#x6f;&amp;#105;&amp;#x73;&amp;#101;&amp;#x6c;&amp;#97;&amp;#x62;&amp;#115;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;
</long-description>
      <tag name="category" description="NoiseLabs"/>
      <tag name="package" description="ToolKit"/>
      <tag name="version" description="version" plugin="doctrine" link="http://www.doctrine-project.org/docs/orm/2.1/en/reference/annotations-reference.html#annref-version" content=".1.">
        <argument field-name="">.1.</argument>
      </tag>
      <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="copyright" description="(C) 2011 V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
    </docblock>
    <parse_markers>
      <error line="38">No DocBlock was found for Constant DATETIME_FORMAT</error>
      <notice line="113">Name of argument $method does not match with function Docblock</notice>
    </parse_markers>
    <class final="false" abstract="false" line="36" namespace="NoiseLabs\ToolKit" package="Default">
      <name>Helper</name>
      <extends/>
      <full_name>\NoiseLabs\ToolKit\Helper</full_name>
      <docblock>
        <description>Helper holds a collection of static methods, useful for generic purposes</description>
        <long-description>
</long-description>
        <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;" line="31"/>
      </docblock>
      <constant namespace="NoiseLabs\ToolKit" line="38" package="Default">
        <name>DATETIME_FORMAT</name>
        <value>Y-m-d G:i:s</value>
      </constant>
      <method final="false" abstract="false" static="true" visibility="public" line="47" package="Default">
        <name>timestamp</name>
        <docblock>
          <description>Returns current timestamp.</description>
          <long-description>
</long-description>
          <tag name="param" description="" type="string" variable="$timestamp" line="40">
            <type by_reference="false">string</type>
          </tag>
          <tag name="since" description="0.2.0" line="40"/>
        </docblock>
        <argument line="47">
          <name>$timestamp</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="63" package="Default">
        <name>sanitizeFileName</name>
        <docblock>
          <description>Returns a safe filename, for a given platform (OS), by replacing all
dangerous characters with an underscore.</description>
          <long-description>
</long-description>
          <tag name="since" description="0.1.0" line="52"/>
          <tag name="param" description="The source filename to be &quot;sanitized&quot;" type="string" variable="$dangerous_filename" line="52">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The target OS" type="string" variable="$platform" line="52">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="string A safe version of the input filename" type="Boolean" line="52">
            <type by_reference="false">Boolean</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$dangerous_filename</name>
          <default/>
          <type/>
        </argument>
        <argument line="63">
          <name>$platform</name>
          <default>unix</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="89" package="Default">
        <name>buildArrayFromObjectsProperty</name>
        <docblock>
          <description>Returns an array made from property values extracted from each object in
the array of objects.</description>
          <long-description>
</long-description>
          <tag name="since" description="0.1.0" line="78"/>
          <tag name="param" description="The collection of objects holding the target property" type="array" variable="$objects" line="78">
            <type by_reference="false">array</type>
          </tag>
          <tag name="param" description="Property name to collect data from" type="string" variable="$property" line="78">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="" type="array" line="78">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="89">
          <name>$objects</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="89">
          <name>$property</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="113" package="Default">
        <name>buildArrayFromObjectsMethod</name>
        <docblock>
          <description>Returns an array made from values extracted the array of obects using
the given method.</description>
          <long-description>
</long-description>
          <tag name="since" description="0.1.0" line="102"/>
          <tag name="param" description="The collection of objects holding the target method" type="array" variable="$objects" line="102">
            <type by_reference="false">array</type>
          </tag>
          <tag name="param" description="Method name to ask for data" type="string" variable="$property" line="102">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="" type="array" line="102">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="113">
          <name>$objects</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="113">
          <name>$method</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="144" package="Default">
        <name>getPreferredLanguage</name>
        <docblock>
          <description>An implementation of PECL's http_negotiate_language as posted on
http://www.php.net/manual/en/function.http-negotiate-language.php by
Anonymous (03-Nov-2008 11:23).</description>
          <long-description>&lt;p&gt;This function negotiates the clients preferred language based on its
Accept-Language HTTP header. The qualifier is recognized and languages
without qualifier are rated highest. The qualifier will be decreased by
10% for partial matches (i.e. matching primary language).&lt;/p&gt;
</long-description>
          <tag name="since" description="0.1.0" line="126"/>
          <tag name="param" description="Array with language-tag-strings that are available" type="array" variable="$available_languages" line="126">
            <type by_reference="false">array</type>
          </tag>
          <tag name="param" description="The language to pick if none available" type="string" variable="$default_language" line="126">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="Returns the negotiated language or the default language" type="string" line="126">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="144">
          <name>$available_languages</name>
          <default>array</default>
          <type>array</type>
        </argument>
        <argument line="144">
          <name>$default_language</name>
          <default>en</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="NoiseLabs/ToolKit/Runner/ProcessManager.php" hash="e2deb9cccfbf0193319516d75c677cdd" package="Process">
    <docblock>
      <description>This file is part of NoiseLabs-PHP-ToolKit</description>
      <long-description>&lt;p&gt;NoiseLabs-PHP-ToolKit is free software; you can redistribute it
and/or modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.&lt;/p&gt;

&lt;p&gt;NoiseLabs-PHP-ToolKit is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.&lt;/p&gt;

&lt;p&gt;You should have received a copy of the GNU Lesser General Public
License along with NoiseLabs-PHP-ToolKit; if not, see
&lt;a href="http://www.gnu.org/licenses/"&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Copyright (C) 2011 V&#xED;tor Brand&#xE3;o &lt;a href="&amp;#109;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#116;&amp;#x6f;&amp;#58;&amp;#x6e;&amp;#111;&amp;#x69;&amp;#115;&amp;#x65;&amp;#98;&amp;#x6c;&amp;#101;&amp;#x65;&amp;#100;&amp;#x40;&amp;#110;&amp;#x6f;&amp;#105;&amp;#x73;&amp;#101;&amp;#x6c;&amp;#97;&amp;#x62;&amp;#115;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;&amp;#x6e;&amp;#111;&amp;#x69;&amp;#115;&amp;#x65;&amp;#98;&amp;#x6c;&amp;#101;&amp;#x65;&amp;#100;&amp;#x40;&amp;#110;&amp;#x6f;&amp;#105;&amp;#x73;&amp;#101;&amp;#x6c;&amp;#97;&amp;#x62;&amp;#115;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;
</long-description>
      <tag name="category" description="NoiseLabs"/>
      <tag name="package" description="Process"/>
      <tag name="version" description="version" plugin="doctrine" link="http://www.doctrine-project.org/docs/orm/2.1/en/reference/annotations-reference.html#annref-version" content=".1.">
        <argument field-name="">.1.</argument>
      </tag>
      <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="copyright" description="(C) 2011 V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
    </docblock>
    <parse_markers>
      <error line="35">No DocBlock was found for Class ProcessManager</error>
      <error line="37">No DocBlock was found for Property $processes</error>
      <error line="38">No DocBlock was found for Property $settings</error>
      <error line="40">No DocBlock was found for Method __construct</error>
      <error line="45">No DocBlock was found for Method has</error>
      <error line="50">No DocBlock was found for Method add</error>
      <error line="99">No DocBlock was found for Method remove</error>
      <notice line="142">Name of argument $value does not match with function Docblock</notice>
    </parse_markers>
    <namespace-alias name="ParameterBag">NoiseLabs\ToolKit\Runner\ParameterBag</namespace-alias>
    <namespace-alias name="ProcessInterface">NoiseLabs\ToolKit\Runner\ProcessInterface</namespace-alias>
    <namespace-alias name="ProcessManagerInterface">NoiseLabs\ToolKit\Runner\ProcessManagerInterface</namespace-alias>
    <class final="false" abstract="false" line="35" namespace="NoiseLabs\ToolKit\Runner" package="Default">
      <name>ProcessManager</name>
      <extends/>
      <full_name>\NoiseLabs\ToolKit\Runner\ProcessManager</full_name>
      <implements>\NoiseLabs\ToolKit\Runner\ProcessManagerInterface</implements>
      <property final="false" static="false" visibility="protected" line="37" package="Default">
        <name>$processes</name>
        <default>array</default>
      </property>
      <property final="false" static="false" visibility="public" line="38" package="Default">
        <name>$settings</name>
        <default/>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="40" package="Default">
        <name>__construct</name>
        <argument line="40">
          <name>$settings</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="45" package="Default">
        <name>has</name>
        <argument line="45">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="50" package="Default">
        <name>add</name>
        <argument line="50">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
        <argument line="50">
          <name>$process</name>
          <default/>
          <type>ProcessInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="69" package="Default">
        <name>set</name>
        <docblock>
          <description>Add a new Process to the container.</description>
          <long-description>&lt;p&gt;A previous process with the same ID will be overridden.&lt;/p&gt;
</long-description>
          <tag name="param" description="Process ID" type="string" variable="$id" line="59">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The Process object to add" type="\NoiseLabs\ToolKit\Runner\ProcessInterface" variable="$process" line="59">
            <type by_reference="false">\NoiseLabs\ToolKit\Runner\ProcessInterface</type>
          </tag>
          <tag name="return" description="(ProcessManager)" type="\NoiseLabs\ToolKit\Runner\self" line="59">
            <type by_reference="false">\NoiseLabs\ToolKit\Runner\self</type>
          </tag>
        </docblock>
        <argument line="69">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
        <argument line="69">
          <name>$process</name>
          <default/>
          <type>ProcessInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="89" package="Default">
        <name>get</name>
        <docblock>
          <description>Gets a Process registered in this object.</description>
          <long-description>
</long-description>
          <tag name="param" description="Process ID" type="\NoiseLabs\ToolKit\Runner\$id" variable="$id" line="82">
            <type by_reference="false">\NoiseLabs\ToolKit\Runner\$id</type>
          </tag>
          <tag name="throws" description="if no process is registered with $id" type="\NoiseLabs\ToolKit\Runner\InvalidArgumentException" line="82">
            <type by_reference="false">\NoiseLabs\ToolKit\Runner\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="89">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="99" package="Default">
        <name>remove</name>
        <argument line="99">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="117" package="Default">
        <name>offsetExists</name>
        <docblock>
          <description>Returns true if the section exists (implements the \ArrayAccess
interface).</description>
          <long-description>
</long-description>
          <tag name="param" description="The name of the section" type="string" variable="$offset" line="109">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="true if the section exists, false otherwise" type="Boolean" line="109">
            <type by_reference="false">Boolean</type>
          </tag>
        </docblock>
        <argument line="117">
          <name>$offset</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="130" package="Default">
        <name>offsetGet</name>
        <docblock>
          <description>Returns the array of options associated with the section (implements
the \ArrayAccess interface).</description>
          <long-description>
</long-description>
          <tag name="param" description="The offset of the value to get" type="string" variable="$offset" line="122">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="The array of options associated with the section" type="mixed" line="122">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="130">
          <name>$offset</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="142" package="Default">
        <name>offsetSet</name>
        <docblock>
          <description>Adds an array of options to the given section (implements the
\ArrayAccess interface).</description>
          <long-description>
</long-description>
          <tag name="param" description="Process ID" type="string" variable="$offset" line="135">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="Process to register" type="array" variable="$values" line="135">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="142">
          <name>$offset</name>
          <default/>
          <type/>
        </argument>
        <argument line="142">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="153" package="Default">
        <name>offsetUnset</name>
        <docblock>
          <description>Removes the Process with the given ID (implements the
\ArrayAccess interface).</description>
          <long-description>
</long-description>
          <tag name="param" description="The name of the Process to be removed" type="string" variable="$name" line="147">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="153">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="164" package="Default">
        <name>count</name>
        <docblock>
          <description>Returns the number of registered processes (implements the \Countable
interface).</description>
          <long-description>
</long-description>
          <tag name="return" description="The number of sections" type="integer" line="158">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="174" package="Default">
        <name>getIterator</name>
        <docblock>
          <description>Returns the iterator for this group.</description>
          <long-description>
</long-description>
          <tag name="return" description="" type="\ArrayIterator" line="169">
            <type by_reference="false">\ArrayIterator</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="NoiseLabs/ToolKit/Runner/ParameterBag.php" hash="bf7559e06ffe1f0badfeaf3917ac560b" package="Default">
    <parse_markers>
      <error line="3">No Page-level DocBlock was found</error>
      <error line="40">No DocBlock was found for Property $parameters</error>
    </parse_markers>
    <class final="false" abstract="false" line="38" namespace="NoiseLabs\ToolKit\Runner" package="Default">
      <name>ParameterBag</name>
      <extends/>
      <full_name>\NoiseLabs\ToolKit\Runner\ParameterBag</full_name>
      <docblock>
        <description>ParameterBag is a container for key/value pairs.</description>
        <long-description>
</long-description>
        <tag name="author" description="Fabien Potencier &lt;fabien@symfony.com&gt;" line="33"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="40" package="Default">
        <name>$parameters</name>
        <default/>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="47" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor.</description>
          <long-description>
</long-description>
          <tag name="param" description="An array of parameters" type="array" variable="$parameters" line="42">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="47">
          <name>$parameters</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="57" package="Default">
        <name>all</name>
        <docblock>
          <description>Returns the parameters.</description>
          <long-description>
</long-description>
          <tag name="return" description="An array of parameters" type="array" line="52">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="67" package="Default">
        <name>keys</name>
        <docblock>
          <description>Returns the parameter keys.</description>
          <long-description>
</long-description>
          <tag name="return" description="An array of parameter keys" type="array" line="62">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="77" package="Default">
        <name>replace</name>
        <docblock>
          <description>Replaces the current parameters by a new set.</description>
          <long-description>
</long-description>
          <tag name="param" description="An array of parameters" type="array" variable="$parameters" line="72">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="77">
          <name>$parameters</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="87" package="Default">
        <name>add</name>
        <docblock>
          <description>Adds parameters.</description>
          <long-description>
</long-description>
          <tag name="param" description="An array of parameters" type="array" variable="$parameters" line="82">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="87">
          <name>$parameters</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="99" package="Default">
        <name>get</name>
        <docblock>
          <description>Returns a parameter by name.</description>
          <long-description>
</long-description>
          <tag name="param" description="The key" type="string" variable="$path" line="92">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The default value" type="mixed" variable="$default" line="92">
            <type by_reference="false">mixed</type>
          </tag>
          <tag name="param" description="" type="boolean" variable="$deep" line="92">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="99">
          <name>$path</name>
          <default/>
          <type/>
        </argument>
        <argument line="99">
          <name>$default</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="99">
          <name>$deep</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="154" package="Default">
        <name>set</name>
        <docblock>
          <description>Sets a parameter by name.</description>
          <long-description>
</long-description>
          <tag name="param" description="The key" type="string" variable="$key" line="148">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The value" type="mixed" variable="$value" line="148">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="154">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="154">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="166" package="Default">
        <name>has</name>
        <docblock>
          <description>Returns true if the parameter is defined.</description>
          <long-description>
</long-description>
          <tag name="param" description="The key" type="string" variable="$key" line="159">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="true if the parameter exists, false otherwise" type="Boolean" line="159">
            <type by_reference="false">Boolean</type>
          </tag>
        </docblock>
        <argument line="166">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="176" package="Default">
        <name>remove</name>
        <docblock>
          <description>Removes a parameter.</description>
          <long-description>
</long-description>
          <tag name="param" description="The key" type="string" variable="$key" line="171">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="176">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="190" package="Default">
        <name>getAlpha</name>
        <docblock>
          <description>Returns the alphabetic characters of the parameter value.</description>
          <long-description>
</long-description>
          <tag name="param" description="The parameter key" type="string" variable="$key" line="181">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The default value" type="mixed" variable="$default" line="181">
            <type by_reference="false">mixed</type>
          </tag>
          <tag name="param" description="" type="boolean" variable="$deep" line="181">
            <type by_reference="false">boolean</type>
          </tag>
          <tag name="return" description="The filtered value" type="string" line="181">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="190">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="190">
          <name>$default</name>
          <default/>
          <type/>
        </argument>
        <argument line="190">
          <name>$deep</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="204" package="Default">
        <name>getAlnum</name>
        <docblock>
          <description>Returns the alphabetic characters and digits of the parameter value.</description>
          <long-description>
</long-description>
          <tag name="param" description="The parameter key" type="string" variable="$key" line="195">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The default value" type="mixed" variable="$default" line="195">
            <type by_reference="false">mixed</type>
          </tag>
          <tag name="param" description="" type="boolean" variable="$deep" line="195">
            <type by_reference="false">boolean</type>
          </tag>
          <tag name="return" description="The filtered value" type="string" line="195">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="204">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="204">
          <name>$default</name>
          <default/>
          <type/>
        </argument>
        <argument line="204">
          <name>$deep</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="218" package="Default">
        <name>getDigits</name>
        <docblock>
          <description>Returns the digits of the parameter value.</description>
          <long-description>
</long-description>
          <tag name="param" description="The parameter key" type="string" variable="$key" line="209">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The default value" type="mixed" variable="$default" line="209">
            <type by_reference="false">mixed</type>
          </tag>
          <tag name="param" description="" type="boolean" variable="$deep" line="209">
            <type by_reference="false">boolean</type>
          </tag>
          <tag name="return" description="The filtered value" type="string" line="209">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="218">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="218">
          <name>$default</name>
          <default/>
          <type/>
        </argument>
        <argument line="218">
          <name>$deep</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="232" package="Default">
        <name>getInt</name>
        <docblock>
          <description>Returns the parameter value converted to integer.</description>
          <long-description>
</long-description>
          <tag name="param" description="The parameter key" type="string" variable="$key" line="223">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The default value" type="mixed" variable="$default" line="223">
            <type by_reference="false">mixed</type>
          </tag>
          <tag name="param" description="" type="boolean" variable="$deep" line="223">
            <type by_reference="false">boolean</type>
          </tag>
          <tag name="return" description="The filtered value" type="string" line="223">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="232">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="232">
          <name>$default</name>
          <default>0</default>
          <type/>
        </argument>
        <argument line="232">
          <name>$deep</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="NoiseLabs/ToolKit/Runner/ProcessInterface.php" hash="a79901ad0c8a59ce8a53e1b24f0851bf" package="Process">
    <docblock>
      <description>This file is part of NoiseLabs-PHP-ToolKit</description>
      <long-description>&lt;p&gt;NoiseLabs-PHP-ToolKit is free software; you can redistribute it
and/or modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.&lt;/p&gt;

&lt;p&gt;NoiseLabs-PHP-ToolKit is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.&lt;/p&gt;

&lt;p&gt;You should have received a copy of the GNU Lesser General Public
License along with NoiseLabs-PHP-ToolKit; if not, see
&lt;a href="http://www.gnu.org/licenses/"&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Copyright (C) 2011 V&#xED;tor Brand&#xE3;o &lt;a href="&amp;#109;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#116;&amp;#x6f;&amp;#58;&amp;#x6e;&amp;#111;&amp;#x69;&amp;#115;&amp;#x65;&amp;#98;&amp;#x6c;&amp;#101;&amp;#x65;&amp;#100;&amp;#x40;&amp;#110;&amp;#x6f;&amp;#105;&amp;#x73;&amp;#101;&amp;#x6c;&amp;#97;&amp;#x62;&amp;#115;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;&amp;#x6e;&amp;#111;&amp;#x69;&amp;#115;&amp;#x65;&amp;#98;&amp;#x6c;&amp;#101;&amp;#x65;&amp;#100;&amp;#x40;&amp;#110;&amp;#x6f;&amp;#105;&amp;#x73;&amp;#101;&amp;#x6c;&amp;#97;&amp;#x62;&amp;#115;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;
</long-description>
      <tag name="category" description="NoiseLabs"/>
      <tag name="package" description="Process"/>
      <tag name="version" description="version" plugin="doctrine" link="http://www.doctrine-project.org/docs/orm/2.1/en/reference/annotations-reference.html#annref-version" content=".1.">
        <argument field-name="">.1.</argument>
      </tag>
      <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="copyright" description="(C) 2011 V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
    </docblock>
    <parse_markers>
      <error line="31">No DocBlock was found for Interface ProcessInterface</error>
      <error line="33">No DocBlock was found for Method getCommand</error>
      <error line="35">No DocBlock was found for Method setCommand</error>
      <error line="37">No DocBlock was found for Method run</error>
      <error line="39">No DocBlock was found for Method getOutput</error>
      <error line="41">No DocBlock was found for Method getErrorMessage</error>
      <error line="43">No DocBlock was found for Method getReturnCode</error>
      <error line="45">No DocBlock was found for Method log</error>
    </parse_markers>
    <interface namespace="NoiseLabs\ToolKit\Runner" line="31" package="Default">
      <name>ProcessInterface</name>
      <extends/>
      <full_name>\NoiseLabs\ToolKit\Runner\ProcessInterface</full_name>
      <method final="false" abstract="false" static="false" visibility="public" line="33" package="Default">
        <name>getCommand</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="35" package="Default">
        <name>setCommand</name>
        <argument line="35">
          <name>$command</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="37" package="Default">
        <name>run</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="39" package="Default">
        <name>getOutput</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="41" package="Default">
        <name>getErrorMessage</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="43" package="Default">
        <name>getReturnCode</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="45" package="Default">
        <name>log</name>
        <argument line="45">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="45">
          <name>$level</name>
          <default/>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="NoiseLabs/ToolKit/Runner/ProcessManagerInterface.php" hash="3ab7c0b77ca04d332cced6f1b2b09717" package="Process">
    <docblock>
      <description>This file is part of NoiseLabs-PHP-ToolKit</description>
      <long-description>&lt;p&gt;NoiseLabs-PHP-ToolKit is free software; you can redistribute it
and/or modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.&lt;/p&gt;

&lt;p&gt;NoiseLabs-PHP-ToolKit is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.&lt;/p&gt;

&lt;p&gt;You should have received a copy of the GNU Lesser General Public
License along with NoiseLabs-PHP-ToolKit; if not, see
&lt;a href="http://www.gnu.org/licenses/"&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Copyright (C) 2011 V&#xED;tor Brand&#xE3;o &lt;a href="&amp;#109;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#116;&amp;#x6f;&amp;#58;&amp;#x6e;&amp;#111;&amp;#x69;&amp;#115;&amp;#x65;&amp;#98;&amp;#x6c;&amp;#101;&amp;#x65;&amp;#100;&amp;#x40;&amp;#110;&amp;#x6f;&amp;#105;&amp;#x73;&amp;#101;&amp;#x6c;&amp;#97;&amp;#x62;&amp;#115;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;&amp;#x6e;&amp;#111;&amp;#x69;&amp;#115;&amp;#x65;&amp;#98;&amp;#x6c;&amp;#101;&amp;#x65;&amp;#100;&amp;#x40;&amp;#110;&amp;#x6f;&amp;#105;&amp;#x73;&amp;#101;&amp;#x6c;&amp;#97;&amp;#x62;&amp;#115;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;
</long-description>
      <tag name="category" description="NoiseLabs"/>
      <tag name="package" description="Process"/>
      <tag name="version" description="version" plugin="doctrine" link="http://www.doctrine-project.org/docs/orm/2.1/en/reference/annotations-reference.html#annref-version" content=".1.">
        <argument field-name="">.1.</argument>
      </tag>
      <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="copyright" description="(C) 2011 V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
    </docblock>
    <parse_markers>
      <error line="33">No DocBlock was found for Interface ProcessManagerInterface</error>
      <error line="35">No DocBlock was found for Method has</error>
      <error line="37">No DocBlock was found for Method add</error>
      <error line="39">No DocBlock was found for Method set</error>
      <error line="41">No DocBlock was found for Method get</error>
      <error line="43">No DocBlock was found for Method remove</error>
    </parse_markers>
    <namespace-alias name="ProcessInterface">NoiseLabs\ToolKit\Runner\ProcessInterface</namespace-alias>
    <interface namespace="NoiseLabs\ToolKit\Runner" line="33" package="Default">
      <name>ProcessManagerInterface</name>
      <extends>\ArrayAccess</extends>
      <full_name>\NoiseLabs\ToolKit\Runner\ProcessManagerInterface</full_name>
      <method final="false" abstract="false" static="false" visibility="public" line="35" package="Default">
        <name>has</name>
        <argument line="35">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="37" package="Default">
        <name>add</name>
        <argument line="37">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
        <argument line="37">
          <name>$process</name>
          <default/>
          <type>ProcessInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="39" package="Default">
        <name>set</name>
        <argument line="39">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
        <argument line="39">
          <name>$process</name>
          <default/>
          <type>ProcessInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="41" package="Default">
        <name>get</name>
        <argument line="41">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="43" package="Default">
        <name>remove</name>
        <argument line="43">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="NoiseLabs/ToolKit/Runner/Process.php" hash="96b2534ff562b77da5d1b62ebc4e06fe" package="Runner">
    <docblock>
      <description>This file is part of NoiseLabs-PHP-ToolKit</description>
      <long-description>&lt;p&gt;NoiseLabs-PHP-ToolKit is free software; you can redistribute it
and/or modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.&lt;/p&gt;

&lt;p&gt;NoiseLabs-PHP-ToolKit is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.&lt;/p&gt;

&lt;p&gt;You should have received a copy of the GNU Lesser General Public
License along with NoiseLabs-PHP-ToolKit; if not, see
&lt;a href="http://www.gnu.org/licenses/"&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Copyright (C) 2011 V&#xED;tor Brand&#xE3;o&lt;/p&gt;
</long-description>
      <tag name="category" description="NoiseLabs"/>
      <tag name="package" description="Runner"/>
      <tag name="author" description="V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="copyright" description="(C) 2011 V&#xED;tor Brand&#xE3;o &lt;noisebleed@noiselabs.org&gt;"/>
      <tag name="license" description="http://www.gnu.org/licenses/lgpl-3.0-standalone.html LGPL-3"/>
      <tag name="link" description="http://www.noiselabs.org" link="http://www.noiselabs.org"/>
      <tag name="since" description="0.2.0"/>
    </docblock>
    <parse_markers>
      <error line="35">No DocBlock was found for Class Process</error>
      <error line="37">No DocBlock was found for Constant PACKAGE</error>
      <error line="38">No DocBlock was found for Property $command</error>
      <error line="39">No DocBlock was found for Property $_resource</error>
      <error line="40">No DocBlock was found for Property $_output</error>
      <error line="41">No DocBlock was found for Property $_retcode</error>
      <error line="42">No DocBlock was found for Property $_descriptorspec</error>
      <error line="73">No DocBlock was found for Property $settings</error>
      <error line="75">No DocBlock was found for Method __construct</error>
      <error line="92">No DocBlock was found for Method create</error>
      <error line="97">No DocBlock was found for Method __toString</error>
      <error line="102">No DocBlock was found for Method getCommand</error>
      <error line="107">No DocBlock was found for Method setCommand</error>
      <notice line="117">Argument $args is missing from the function Docblock</notice>
      <notice line="133">Argument $args is missing from the function Docblock</notice>
      <error line="144">No DocBlock was found for Method setArguments</error>
      <error line="149">No DocBlock was found for Method reset</error>
      <error line="156">No DocBlock was found for Method dryrun</error>
      <error line="180">No DocBlock was found for Method run</error>
      <error line="240">No DocBlock was found for Method exec</error>
      <error line="245">No DocBlock was found for Method success</error>
      <error line="250">No DocBlock was found for Method getOutput</error>
      <error line="255">No DocBlock was found for Method getErrorMessage</error>
      <error line="260">No DocBlock was found for Method getReturnCode</error>
      <error line="265">No DocBlock was found for Method getName</error>
      <error line="270">No DocBlock was found for Method log</error>
    </parse_markers>
    <namespace-alias name="ParameterBag">NoiseLabs\ToolKit\Runner\ParameterBag</namespace-alias>
    <namespace-alias name="ProcessInterface">NoiseLabs\ToolKit\Runner\ProcessInterface</namespace-alias>
    <class final="false" abstract="false" line="35" namespace="NoiseLabs\ToolKit\Runner" package="Default">
      <name>Process</name>
      <extends/>
      <full_name>\NoiseLabs\ToolKit\Runner\Process</full_name>
      <implements>\NoiseLabs\ToolKit\Runner\ProcessInterface</implements>
      <constant namespace="NoiseLabs\ToolKit\Runner" line="37" package="Default">
        <name>PACKAGE</name>
        <value>Runner</value>
      </constant>
      <property final="false" static="false" visibility="protected" line="38" package="Default">
        <name>$command</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="39" package="Default">
        <name>$_resource</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="40" package="Default">
        <name>$_output</name>
        <default>array</default>
      </property>
      <property final="false" static="false" visibility="protected" line="41" package="Default">
        <name>$_retcode</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="42" package="Default">
        <name>$_descriptorspec</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="66" package="Default">
        <name>$_defaults</name>
        <default>array</default>
        <docblock>
          <description>Known settings:</description>
          <long-description>&lt;p&gt;'sudo':
        If TRUE, prepend every command with 'sudo'.&lt;/p&gt;

&lt;p&gt;'cwd':
        The initial working dir for the command. This must be an absolute
        directory path, or NULL if you want to use the default value (the
        working dir of the current PHP process).&lt;/p&gt;

&lt;p&gt;'env':
        An array with the environment variables for the command that will
        be run, or NULL to use the same environment as the current PHP
        process.&lt;/p&gt;

&lt;p&gt;'dry-run':
        Fake the results of executing the process without actually
        running anything any files.&lt;/p&gt;
</long-description>
          <tag name="var" description="" type="array" line="44">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="73" package="Default">
        <name>$settings</name>
        <default/>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="75" package="Default">
        <name>__construct</name>
        <argument line="75">
          <name>$command</name>
          <default/>
          <type/>
        </argument>
        <argument line="75">
          <name>$settings</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="92" package="Default">
        <name>create</name>
        <argument line="92">
          <name>$command</name>
          <default/>
          <type/>
        </argument>
        <argument line="92">
          <name>$settings</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="97" package="Default">
        <name>__toString</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="102" package="Default">
        <name>getCommand</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="107" package="Default">
        <name>setCommand</name>
        <argument line="107">
          <name>$command</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="117" package="Default">
        <name>addArguments</name>
        <docblock>
          <description>Append arguments to the currently set $command.</description>
          <long-description>
</long-description>
          <tag name="throws" description="if $args is not a string" type="\NoiseLabs\ToolKit\Runner\InvalidArgumentException" line="112">
            <type by_reference="false">\NoiseLabs\ToolKit\Runner\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="117">
          <name>$args</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="133" package="Default">
        <name>replaceArguments</name>
        <docblock>
          <description>Replace arguments set in $command with a new string</description>
          <long-description>
</long-description>
          <tag name="throws" description="if $args is not a string" type="\NoiseLabs\ToolKit\Runner\InvalidArgumentException" line="128">
            <type by_reference="false">\NoiseLabs\ToolKit\Runner\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="133">
          <name>$args</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="144" package="Default">
        <name>setArguments</name>
        <argument line="144">
          <name>$args</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="149" package="Default">
        <name>reset</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="156" package="Default">
        <name>dryrun</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="180" package="Default">
        <name>run</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="240" package="Default">
        <name>exec</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="245" package="Default">
        <name>success</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="250" package="Default">
        <name>getOutput</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="255" package="Default">
        <name>getErrorMessage</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="260" package="Default">
        <name>getReturnCode</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="265" package="Default">
        <name>getName</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="270" package="Default">
        <name>log</name>
        <argument line="270">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="270">
          <name>$level</name>
          <default>info</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <package name="ConfigParser"/>
  <package name="Default"/>
  <package name="GoogleAPI"/>
  <package name="Process"/>
  <package name="Runner"/>
  <package name="ToolKit"/>
  <package name="ToolKit&#10;Phoogle Maps 2">
    <package name="0 | Uses Google Maps API to create customizable maps&#10;that can be embedded on your website&#10;Copyright (C) 2005  Justin Johnson&#10;This program is free software; you can redistribute it and/or modify&#10;it under the terms of the GNU General Public License as published by&#10;the Free Software Foundation; either version 2 of the License, or&#10;(at your option) any later version">
      <package name="&#10;This program is distributed in the hope that it will be useful,&#10;but WITHOUT ANY WARRANTY; without even the implied warranty of&#10;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE">
        <package name="  See the&#10;GNU General Public License for more details">
          <package name="&#10;You should have received a copy of the GNU General Public License&#10;along with this program; if not, write to the Free Software&#10;Foundation, Inc">
            <package name=", 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA&#10;Phoogle Maps 2">
              <package name="0&#10;Uses Google Maps Mapping API to create customizable Google Maps that can be&#10;embedded on your website"/>
            </package>
          </package>
        </package>
      </package>
    </package>
  </package>
  <namespace name="NoiseLabs">
    <namespace name="ToolKit">
      <namespace name="ConfigParser">
        <namespace name="Exception"/>
      </namespace>
      <namespace name="GoogleAPI">
        <namespace name="Maps">
          <namespace name="Overlay"/>
        </namespace>
      </namespace>
      <namespace name="Runner"/>
    </namespace>
  </namespace>
  <marker>todo</marker>
  <marker>fixme</marker>
</project>
